/*
 * VPN.java
 *
 * Created on 7 de octubre de 2006, 19:07
 */
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;
import javax.swing.table.*;
import java.awt.*;
import java.lang.*;
import java.lang.Double.*;
import javax.swing.text.*;
import java.io.*;
import java.util.Vector;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.*;
//Paquetes Especialmente para imprimir
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;


/**
 *
 * @Autor: Marcos Michael Rodriguez Chavarria
 */
public class VPN extends javax.swing.JInternalFrame {
    //declaracion  de variables requerimientos
    private String depreciacion = null;
    private String mcalculo = null;
    private int _depreciacion = 0;      //identificadores
    private int _mcalculo = 0;          //identificadores
    private String empresa  = null;
    private double inversion = 0;
    private double vutil = 0;
    private double tmar = 0;
    private double vsalvamento = 0;
    private double ir = 0;
    private double financiamiento =0;
    private double interes = 0;
    private double plazo = 0;
    public double pg = 0;
    private double IngresosF=0;
    private double CostosF =0;
    private double GastosF =0;
    //VPN con financiamiento
    private double[] ub1 = new double[100];  //utilidad bruta
    private double[] uop1 = new double[100]; // utilidad operativa ai
    private double[] uop_1 = new double[100]; // utilidad operativa di
    private double[] impuesto1 = new double[100]; // impuesto sobre la renta
    private double[] FNE1 = new double[100];    //flujo neto de efectivo
    
    private double[] ub2 = new double[100];  //utilidad bruta
    private double[] uop2 = new double[100]; // utilidad operativa ai
    private double[] uop_2 = new double[100]; // utilidad operativa di
    private double[] impuesto2 = new double[100]; // impuesto sobre la renta
    private double[] FNE2 = new double[100];    //flujo neto de efectivo
    
    private double inte =0; //intereses para pago unico
    
    private static double[] var_ingresos = new double[100];
    private static double[] var_costos = new double[100];
    private static double[] var_gastos= new double[100];
    private static double[] vlibros = new double[100];
    private static double[] vdepreciacion = new double[100];
    //variables Prestamo
    private static double[] Ik = new double[100];
    private static double[] Ck = new double[100];
    private static double[] Sk= new double[100];
    private static double[] pp = new double[100];
    public int añoc = 0;
    public Thread hilo = new Thread();
    public Thread hilo2 = new Thread();
    DefaultMutableTreeNode n_ingresos = null;
    DefaultMutableTreeNode n_costos = null;
    DefaultMutableTreeNode n_gastos = null;
    DefaultMutableTreeNode detalle = null;
    DefaultTreeModel treeModel = null;
    static DefaultTableModel modelo1;
    static DefaultTableModel modelo4;
    static DefaultTableModel modelotabla1;
    static DefaultTableModel modelotabla2;
    static Vector R;
    static Vector C;
    static Vector rambo;
    static Vector Marcos;
    
    
    public String NuevoHijo = null;
    private int v = 0;  //vida util en enteros
    private int sufijo = 0;
    private int sufijoc = 0;
    private int sufijog = 0;
    public String tipoIngreso = "variable";
    public String tipoCosto = "variable";
    public String tipoGasto = "variable";
    public DefaultTableModel modeloingreso= null ;
    public DefaultTableModel modelocosto = null;
    public DefaultTableModel modelogasto = null;
    public boolean per1 = false; //ingresos
    public boolean per2 = false; //costos
    public boolean per3 = false;  //gastos
    public int imprimir = 0;
    
    
    /** Creates new form VPN */
    public VPN() {
        detalle = new DefaultMutableTreeNode("Detalle de Cuentas Varibles");
        treeModel = new DefaultTreeModel(detalle);
        initComponents();
        
        jTree2.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree2.setShowsRootHandles(true);
        CrearNodos(detalle);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * WARNING:Ni intentes piratear o tratar de asimilar este codigo te fastidiaras la vida
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        grupo1 = new javax.swing.ButtonGroup();
        grupo2 = new javax.swing.ButtonGroup();
        grupo3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jtabbedpane = new javax.swing.JTabbedPane();
        requerimientos = new javax.swing.JPanel();
        b_aceptar1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        t_empresa = new javax.swing.JTextField();
        t_monto = new javax.swing.JTextField();
        t_monto.addKeyListener(new KeyAdapter()
            {
                public void keyTyped(KeyEvent e)
                {
                    char c = e.getKeyChar();
                    int x = e.getKeyChar();
                    int keyCode = e.getKeyCode();
                    t_monto.setBackground(Color.black);
                    if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                    {
                        try
                        {
                            e.consume();
                        }
                        catch(Exception E){}
                    }
                    else
                    {
                        t_monto.setBackground(Color.black);
                    }
                }
            });

            jLabel2 = new javax.swing.JLabel();
            jLabel6 = new javax.swing.JLabel();
            t_vsalvamento = new javax.swing.JTextField();
            t_vsalvamento.addKeyListener(new KeyAdapter()
                {
                    public void keyTyped(KeyEvent e)
                    {
                        char c = e.getKeyChar();
                        int x = e.getKeyChar();
                        int keyCode = e.getKeyCode();
                        t_vsalvamento.setBackground(Color.black);
                        if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                        {
                            try
                            {
                                e.consume();
                            }
                            catch(Exception E){}
                        }
                        else
                        {
                            t_vsalvamento.setBackground(Color.black);
                        }
                    }
                });

                jc_depreciacion = new javax.swing.JComboBox();
                jc_depreciacion.addActionListener(new depre());
                jLabel5 = new javax.swing.JLabel();
                jLabel7 = new javax.swing.JLabel();
                t_ir = new javax.swing.JTextField();
                t_ir.addKeyListener(new KeyAdapter()
                    {
                        public void keyTyped(KeyEvent e)
                        {

                            char c = e.getKeyChar();
                            int x = e.getKeyChar();
                            t_ir.setBackground(Color.black);
                            int keyCode = e.getKeyCode();
                            if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                            {
                                try
                                {
                                    e.consume();
                                }
                                catch(Exception E){}
                            }
                            else
                            {
                                t_ir.setBackground(Color.black);
                            }
                        }
                    });

                    t_vutil = new javax.swing.JTextField();
                    t_vutil.addKeyListener(new KeyAdapter()
                        {
                            public void keyTyped(KeyEvent e)
                            {
                                char c = e.getKeyChar();
                                int x = e.getKeyChar();
                                int keyCode = e.getKeyCode();
                                t_vutil.setBackground(Color.black);
                                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE)))
                                {
                                    try
                                    {
                                        e.consume();
                                    }
                                    catch(Exception E){}
                                }
                                else
                                {
                                    t_vutil.setBackground(Color.black);
                                }
                            }
                        });

                        jLabel3 = new javax.swing.JLabel();
                        jLabel4 = new javax.swing.JLabel();
                        t_tmar = new javax.swing.JTextField();
                        t_tmar.addKeyListener(new KeyAdapter()
                            {
                                public void keyTyped(KeyEvent e)
                                {
                                    char c = e.getKeyChar();
                                    int x = e.getKeyChar();
                                    int keyCode = e.getKeyCode();
                                    t_tmar.setBackground(Color.black);
                                    if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                                    {
                                        try
                                        {
                                            e.consume();
                                        }
                                        catch(Exception E){}
                                    }
                                    else
                                    {
                                        t_tmar.setBackground(Color.black);
                                    }
                                }
                            });

                            jPanel5 = new javax.swing.JPanel();
                            jLabel8 = new javax.swing.JLabel();
                            t_mfinanciamiento = new javax.swing.JTextField();
                            t_mfinanciamiento.addKeyListener(new KeyAdapter()
                                {
                                    public void keyTyped(KeyEvent e)
                                    {
                                        char c = e.getKeyChar();
                                        int x = e.getKeyChar();
                                        int keyCode = e.getKeyCode();
                                        t_mfinanciamiento.setBackground(Color.black);
                                        if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                                        {
                                            try
                                            {
                                                e.consume();
                                            }
                                            catch(Exception E){}
                                        }
                                        else
                                        {
                                            t_mfinanciamiento.setBackground(Color.black);
                                        }
                                    }
                                });

                                jc_mcalculo = new javax.swing.JComboBox();
                                jc_mcalculo.addActionListener(new Metodo());
                                jLabel11 = new javax.swing.JLabel();
                                jLabel9 = new javax.swing.JLabel();
                                t_interes = new javax.swing.JTextField();
                                t_interes.addKeyListener(new KeyAdapter()
                                    {
                                        public void keyTyped(KeyEvent e)
                                        {
                                            char c = e.getKeyChar();
                                            int x = e.getKeyChar();
                                            int keyCode = e.getKeyCode();
                                            t_interes.setBackground(Color.black);
                                            if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                                            {
                                                try
                                                {
                                                    e.consume();
                                                }
                                                catch(Exception E){}
                                            }
                                            else
                                            {
                                                t_interes.setBackground(Color.black);
                                            }
                                        }
                                    });

                                    t_plazo = new javax.swing.JTextField();
                                    t_plazo.addKeyListener(new KeyAdapter()
                                        {
                                            public void keyTyped(KeyEvent e)
                                            {
                                                char c = e.getKeyChar();
                                                int x = e.getKeyChar();
                                                int keyCode = e.getKeyCode();
                                                t_plazo.setBackground(Color.black);
                                                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE)))
                                                {
                                                    try
                                                    {
                                                        e.consume();
                                                    }
                                                    catch(Exception E){}
                                                }
                                                else
                                                {
                                                    t_plazo.setBackground(Color.black);
                                                }
                                            }
                                        });

                                        jLabel10 = new javax.swing.JLabel();
                                        l_añoc = new javax.swing.JLabel();
                                        t_añoc = new javax.swing.JTextField();
                                        t_añoc.addKeyListener(new KeyAdapter()
                                            {
                                                public void keyTyped(KeyEvent e)
                                                {
                                                    char c = e.getKeyChar();
                                                    int x = e.getKeyChar();
                                                    int keyCode = e.getKeyCode();
                                                    t_vutil.setBackground(Color.black);
                                                    if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE)))
                                                    {
                                                        try
                                                        {
                                                            e.consume();
                                                        }
                                                        catch(Exception E){}
                                                    }
                                                    else
                                                    {
                                                        t_añoc.setBackground(Color.black);
                                                    }
                                                }
                                            });

                                            jButton1 = new javax.swing.JButton();
                                            jButton1.addActionListener(new Boton1());
                                            barra = new javax.swing.JProgressBar();
                                            barra.setVisible(false);
                                            foleo = new javax.swing.JLabel();
                                            foleo.setVisible(false);
                                            fileo2 = new javax.swing.JLabel();
                                            fileo2.setVisible(false);
                                            jPanel2 = new javax.swing.JPanel();
                                            jLabel12 = new javax.swing.JLabel();
                                            jLabel19 = new javax.swing.JLabel();
                                            jLabel22 = new javax.swing.JLabel();
                                            txtingresos = new javax.swing.JTextField();
                                            txtingresos.addKeyListener(new KeyAdapter()
                                                {
                                                    public void keyTyped(KeyEvent e)
                                                    {
                                                        char c = e.getKeyChar();
                                                        int x = e.getKeyChar();
                                                        int keyCode = e.getKeyCode();
                                                        t_monto.setBackground(Color.black);
                                                        if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                                                        {
                                                            try
                                                            {
                                                                e.consume();
                                                            }
                                                            catch(Exception E){}
                                                        }
                                                        else
                                                        {
                                                            t_monto.setBackground(Color.black);
                                                        }
                                                    }
                                                });
                                                txtgastos = new javax.swing.JTextField();
                                                txtgastos.addKeyListener(new KeyAdapter()
                                                    {
                                                        public void keyTyped(KeyEvent e)
                                                        {
                                                            char c = e.getKeyChar();
                                                            int x = e.getKeyChar();
                                                            int keyCode = e.getKeyCode();
                                                            t_monto.setBackground(Color.black);
                                                            if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                                                            {
                                                                try
                                                                {
                                                                    e.consume();
                                                                }
                                                                catch(Exception E){}
                                                            }
                                                            else
                                                            {
                                                                t_monto.setBackground(Color.black);
                                                            }
                                                        }
                                                    });
                                                    txtcostos = new javax.swing.JTextField();
                                                    txtcostos.addKeyListener(new KeyAdapter()
                                                        {
                                                            public void keyTyped(KeyEvent e)
                                                            {
                                                                char c = e.getKeyChar();
                                                                int x = e.getKeyChar();
                                                                int keyCode = e.getKeyCode();
                                                                t_monto.setBackground(Color.black);
                                                                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == '.')))
                                                                {
                                                                    try
                                                                    {
                                                                        e.consume();
                                                                    }
                                                                    catch(Exception E){}
                                                                }
                                                                else
                                                                {
                                                                    t_monto.setBackground(Color.black);
                                                                }
                                                            }
                                                        });
                                                        jLabel23 = new javax.swing.JLabel();
                                                        jLabel24 = new javax.swing.JLabel();
                                                        jLabel25 = new javax.swing.JLabel();
                                                        CF = new javax.swing.JCheckBox();
                                                        IV = new javax.swing.JCheckBox();
                                                        IF = new javax.swing.JCheckBox();
                                                        GF = new javax.swing.JCheckBox();
                                                        GV = new javax.swing.JCheckBox();
                                                        CV = new javax.swing.JCheckBox();
                                                        jLabel26 = new javax.swing.JLabel();
                                                        jLabel27 = new javax.swing.JLabel();
                                                        jLabel28 = new javax.swing.JLabel();
                                                        jLabel29 = new javax.swing.JLabel();
                                                        jLabel30 = new javax.swing.JLabel();
                                                        jLabel31 = new javax.swing.JLabel();
                                                        fuego = new javax.swing.JLabel();
                                                        fuego.setVisible(false);
                                                        tablas = new javax.swing.JPanel();
                                                        jPanel6 = new javax.swing.JPanel();
                                                        js_calendario = new javax.swing.JScrollPane();
                                                        tab_calendario = new javax.swing.JTable();
                                                        jPanel7 = new javax.swing.JPanel();
                                                        js_depreciacion = new javax.swing.JScrollPane();
                                                        tab_depreciacion = new javax.swing.JTable();
                                                        estado_sf = new javax.swing.JPanel();
                                                        jScrollPane10 = new javax.swing.JScrollPane();
                                                        jTree2 =  new JTree(treeModel);
                                                        jScrollPane11 = new javax.swing.JScrollPane();
                                                        jTextArea2 = new javax.swing.JTextArea();
                                                        agregar = new javax.swing.JButton();
                                                        jLabel20 = new javax.swing.JLabel();
                                                        barra2 = new javax.swing.JProgressBar();
                                                        barra2.setVisible(false);
                                                        A = new javax.swing.JLabel();
                                                        jPanel3 = new javax.swing.JPanel();
                                                        js_ingresos = new javax.swing.JScrollPane();
                                                        tab_ingresos = new javax.swing.JTable();
                                                        SubTotalIngresos = new javax.swing.JButton();
                                                        jLabel16 = new javax.swing.JLabel();
                                                        jLabel17 = new javax.swing.JLabel();
                                                        SubTotalCostos = new javax.swing.JButton();
                                                        js_costos = new javax.swing.JScrollPane();
                                                        tab_costos = new javax.swing.JTable();
                                                        jLabel18 = new javax.swing.JLabel();
                                                        js_gastos = new javax.swing.JScrollPane();
                                                        tab_gastos = new javax.swing.JTable();
                                                        SubTotalGastos = new javax.swing.JButton();
                                                        estados = new javax.swing.JPanel();
                                                        finale = new javax.swing.JButton();
                                                        jProgressBar1 = new javax.swing.JProgressBar();
                                                        jProgressBar1.setVisible(false);
                                                        jLabel32 = new javax.swing.JLabel();
                                                        jPanel8 = new javax.swing.JPanel();
                                                        js_er1 = new javax.swing.JScrollPane();
                                                        tabla1 = new javax.swing.JTable();
                                                        js_er2 = new javax.swing.JScrollPane();
                                                        tabla2 = new javax.swing.JTable();
                                                        jLabel13 = new javax.swing.JLabel();
                                                        jLabel14 = new javax.swing.JLabel();
                                                        jMenuBar1 = new javax.swing.JMenuBar();
                                                        Archivo = new javax.swing.JMenu();
                                                        jSeparator23 = new javax.swing.JSeparator();
                                                        jSeparator24 = new javax.swing.JSeparator();
                                                       
                                                        jSeparator1 = new javax.swing.JSeparator();
                                                        Salir = new javax.swing.JMenuItem();
                                                        jSeparator21 = new javax.swing.JSeparator();
                                                        jSeparator22 = new javax.swing.JSeparator();
                                                        jMenu1 = new javax.swing.JMenu();
                                                        Imprimir = new javax.swing.JMenu();
                                                        jSeparator3 = new javax.swing.JSeparator();
                                                        jSeparator11 = new javax.swing.JSeparator();
                                                        imp_depreciacion = new javax.swing.JMenuItem();
                                                        jSeparator6 = new javax.swing.JSeparator();
                                                        imp_calendario = new javax.swing.JMenuItem();
                                                        jSeparator5 = new javax.swing.JSeparator();
                                                        imp_detalleingresos = new javax.swing.JMenuItem();
                                                        jSeparator8 = new javax.swing.JSeparator();
                                                        imp_detallecostos = new javax.swing.JMenuItem();
                                                        jSeparator4 = new javax.swing.JSeparator();
                                                        imp_detallegast = new javax.swing.JMenuItem();
                                                        jSeparator9 = new javax.swing.JSeparator();
                                                        imp_estadof = new javax.swing.JMenuItem();
                                                        jSeparator7 = new javax.swing.JSeparator();
                                                        imp_estadonf = new javax.swing.JMenuItem();
                                                        jSeparator10 = new javax.swing.JSeparator();
                                                        jSeparator30 = new javax.swing.JSeparator();
                                                        excel = new javax.swing.JMenu();
                                                        jSeparator20 = new javax.swing.JSeparator();
                                                        jSeparator12 = new javax.swing.JSeparator();
                                                        exceldepreciacion1 = new javax.swing.JMenuItem();
                                                        jSeparator14 = new javax.swing.JSeparator();
                                                        excelcalendario1 = new javax.swing.JMenuItem();
                                                        jSeparator15 = new javax.swing.JSeparator();
                                                        exceldetalleingresos1 = new javax.swing.JMenuItem();
                                                        jSeparator16 = new javax.swing.JSeparator();
                                                        exceldetallecostos1 = new javax.swing.JMenuItem();
                                                        jSeparator13 = new javax.swing.JSeparator();
                                                        exceldetallegastos = new javax.swing.JMenuItem();
                                                        jSeparator18 = new javax.swing.JSeparator();
                                                        excelestadonf1 = new javax.swing.JMenuItem();
                                                        jSeparator17 = new javax.swing.JSeparator();
                                                        excelestadof1 = new javax.swing.JMenuItem();
                                                        jSeparator19 = new javax.swing.JSeparator();
                                                        jSeparator29 = new javax.swing.JSeparator();
                                                        jMenu2 = new javax.swing.JMenu();
                                                        calculadora = new javax.swing.JMenuItem();

                                                        getContentPane().setLayout(null);

                                                        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                                        setTitle("Evaluaci\u00f3n de Proyectos de Inversiones");
                                                        setBackground(new java.awt.Color(0, 0, 0));
                                                        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                                                        //setMaximizedBounds(new java.awt.Rectangle(0, 0, 1000, 900));
                                                        jPanel1.setLayout(null);

                                                        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
                                                        jtabbedpane.setBackground(new java.awt.Color(255, 255, 255));
                                                        jtabbedpane.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        requerimientos.setLayout(null);

                                                        requerimientos.setBackground(new java.awt.Color(255, 255, 255));
                                                        requerimientos.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        b_aceptar1.setFont(new java.awt.Font("Bangle", 1, 14));
                                                        b_aceptar1.setText("Aceptar");
                                                        b_aceptar1.setToolTipText("Cuando tenga completos  todos los campos de los requerimientos, haga clic en este Boton.\n");
                                                        requerimientos.add(b_aceptar1);
                                                        b_aceptar1.setBounds(320, 730, 110, 27);

                                                        jPanel4.setLayout(null);

                                                        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
                                                        jPanel4.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 102, 255), null, null), "Datos de la Inversi\u00f3n", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 2, 14), new java.awt.Color(51, 51, 51)));
                                                        jPanel4.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        jLabel1.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel1.setText("Nombre de Empresa");
                                                        jPanel4.add(jLabel1);
                                                        jLabel1.setBounds(10, 30, 160, 20);

                                                        t_empresa.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_empresa.setToolTipText("Escriba el nomre de la Razon Social");
                                                        jPanel4.add(t_empresa);
                                                        t_empresa.setBounds(180, 30, 150, 20);

                                                        t_monto.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_monto.setToolTipText("Escriba el monto de su inversi\u00f3n.\n");
                                                        jPanel4.add(t_monto);
                                                        t_monto.setBounds(180, 70, 150, 20);

                                                        jLabel2.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel2.setText("Monto Inversi\u00f3n");
                                                        jPanel4.add(jLabel2);
                                                        jLabel2.setBounds(10, 70, 170, 20);

                                                        jLabel6.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel6.setText("Valor de Salvamento ($)");
                                                        jPanel4.add(jLabel6);
                                                        jLabel6.setBounds(10, 110, 170, 20);

                                                        t_vsalvamento.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_vsalvamento.setToolTipText("Escriba el valor de salvamento de su inversi\u00f3n");
                                                        jPanel4.add(t_vsalvamento);
                                                        t_vsalvamento.setBounds(180, 110, 150, 20);

                                                        jc_depreciacion.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        jc_depreciacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Linea Recta", "S.D.A. Incremental", "S.D.A. Decremental" }));
                                                        jc_depreciacion.setToolTipText("Aqui seleccione la forma de calcular la depreciaci\u00f3n de la inversi\u00f3n\n\n");
                                                        jPanel4.add(jc_depreciacion);
                                                        jc_depreciacion.setBounds(180, 150, 148, 20);

                                                        jLabel5.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel5.setText("M\u00e9todo de Depreciaci\u00f3n");
                                                        jPanel4.add(jLabel5);
                                                        jLabel5.setBounds(10, 150, 160, 20);

                                                        jLabel7.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel7.setText("Tasa I.R.                    ( %)");
                                                        jPanel4.add(jLabel7);
                                                        jLabel7.setBounds(10, 190, 170, 20);

                                                        t_ir.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_ir.setToolTipText("La tasa del Impuesto sobre la Renta.");
                                                        jPanel4.add(t_ir);
                                                        t_ir.setBounds(180, 190, 50, 20);

                                                        t_vutil.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_vutil.setToolTipText("Escriba la vida \u00fatil de la inversi\u00f3n, osea cuanto tiempo durara la inversi\u00f3on generando ganancia.\n");
                                                        jPanel4.add(t_vutil);
                                                        t_vutil.setBounds(180, 230, 50, 20);

                                                        jLabel3.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel3.setText("Vida Util                (A\u00f1os)");
                                                        jPanel4.add(jLabel3);
                                                        jLabel3.setBounds(10, 230, 170, 20);

                                                        jLabel4.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel4.setText("T.M.A.R.                     (%)");
                                                        jPanel4.add(jLabel4);
                                                        jLabel4.setBounds(10, 270, 170, 20);

                                                        t_tmar.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_tmar.setToolTipText("Escriba el valor de la Tasa Minima De Retorno de la inversion, recuerde que este es un Valor Porcentual.");
                                                        jPanel4.add(t_tmar);
                                                        t_tmar.setBounds(180, 270, 50, 20);

                                                        requerimientos.add(jPanel4);
                                                        jPanel4.setBounds(20, 10, 360, 310);

                                                        jPanel5.setLayout(null);

                                                        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
                                                        jPanel5.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 102, 255), null, null)), "Datos de la Inversi\u00f3n", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 2, 14)));
                                                        jPanel5.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        jLabel8.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel8.setText("Monto  Financiamiento");
                                                        jPanel5.add(jLabel8);
                                                        jLabel8.setBounds(20, 30, 137, 20);

                                                        t_mfinanciamiento.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_mfinanciamiento.setToolTipText("Monto del prestamo o financiamiento.");
                                                        jPanel5.add(t_mfinanciamiento);
                                                        t_mfinanciamiento.setBounds(180, 30, 150, 20);

                                                        jc_mcalculo.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        jc_mcalculo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Pago Unico", "Cuota Nivelada", "Cuota Proporcional", "Interés FLAT" }));
                                                        jc_mcalculo.setToolTipText("Seleccione la forma de calcular los Intereses de su inversi\u00f3n.\n");
                                                        jPanel5.add(jc_mcalculo);
                                                        jc_mcalculo.setBounds(180, 70, 150, 20);

                                                        jLabel11.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel11.setText("Tipo de Cuota");
                                                        jPanel5.add(jLabel11);
                                                        jLabel11.setBounds(20, 70, 130, 20);

                                                        jLabel9.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel9.setText("Tasa de Inter\u00e9s");
                                                        jPanel5.add(jLabel9);
                                                        jLabel9.setBounds(20, 110, 110, 20);

                                                        t_interes.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_interes.setToolTipText("El porcentaje de Intereses por tu prestamo.");
                                                        jPanel5.add(t_interes);
                                                        t_interes.setBounds(180, 110, 50, 20);

                                                        t_plazo.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_plazo.setToolTipText("El plazo de tu prestamo, no debe ser mayor que el de la inversi\u00f3n.");
                                                        jPanel5.add(t_plazo);
                                                        t_plazo.setBounds(180, 150, 50, 20);

                                                        jLabel10.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel10.setText("Plazo en A\u00f1os");
                                                        jPanel5.add(jLabel10);
                                                        jLabel10.setBounds(20, 150, 120, 20);

                                                        l_añoc.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        l_añoc.setText("A\u00f1o de cancelaci\u00f3n");
                                                        jPanel5.add(l_añoc);
                                                        l_añoc.setBounds(20, 190, 140, 20);

                                                        l_añoc.setVisible(false);
                                                        t_añoc.setVisible(false);

                                                        t_añoc.setFont(new java.awt.Font("Bodoni MT", 2, 15));
                                                        t_añoc.setToolTipText("Aqui el a\u00f1o en el que har\u00e1 el pago \u00fanico del pr\u00e9stamo");
                                                        jPanel5.add(t_añoc);
                                                        t_añoc.setBounds(180, 190, 50, 20);

                                                        requerimientos.add(jPanel5);
                                                        jPanel5.setBounds(390, 10, 350, 310);

                                                        jButton1.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jButton1.setIcon(new javax.swing.ImageIcon("Imagenes/rbrs.gif"));
                                                        jButton1.setText("Aceptar ");
                                                        jButton1.setToolTipText("Pase a la siguiente etapa de requerimientos");
                                                        requerimientos.add(jButton1);
                                                        jButton1.setBounds(630, 430, 110, 30);

                                                        barra.setBackground(new java.awt.Color(255, 102, 102));
                                                        barra.setForeground(new java.awt.Color(51, 51, 51));
                                                        requerimientos.add(barra);
                                                        barra.setBounds(20, 480, 720, 10);

                                                        foleo.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        foleo.setForeground(new java.awt.Color(255, 0, 102));
                                                        requerimientos.add(foleo);
                                                        foleo.setBounds(20, 450, 280, 0);

                                                        fileo2.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        fileo2.setForeground(new java.awt.Color(255, 0, 102));
                                                        requerimientos.add(fileo2);
                                                        fileo2.setBounds(20, 500, 190, 20);

                                                        jPanel2.setLayout(null);

                                                        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
                                                        jPanel2.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 102, 255), null, null), "Cuentas Variables Anuales", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 2, 14)));
                                                        jPanel2.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        jLabel12.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel12.setText("Ingresos");
                                                        jPanel2.add(jLabel12);
                                                        jLabel12.setBounds(20, 20, 70, 20);

                                                        jLabel19.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel19.setText("Costos");
                                                        jPanel2.add(jLabel19);
                                                        jLabel19.setBounds(20, 50, 50, 20);

                                                        jLabel22.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel22.setText("Gastos Opertivos");
                                                        jPanel2.add(jLabel22);
                                                        jLabel22.setBounds(20, 80, 120, 20);

                                                        txtingresos.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        txtingresos.setToolTipText("Tus Ingresos anuales");
                                                        txtingresos.setEnabled(false);
                                                        jPanel2.add(txtingresos);
                                                        txtingresos.setBounds(460, 20, 90, 23);

                                                        txtgastos.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        txtgastos.setToolTipText("Tus gastos operativos anuales");
                                                        txtgastos.setEnabled(false);
                                                        jPanel2.add(txtgastos);
                                                        txtgastos.setBounds(460, 80, 90, 23);

                                                        txtcostos.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        txtcostos.setToolTipText("Tus Costos anuales");
                                                        txtcostos.setEnabled(false);
                                                        jPanel2.add(txtcostos);
                                                        txtcostos.setBounds(460, 50, 90, 23);

                                                        jLabel23.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel23.setText("Ingresos Fijos");
                                                        jLabel23.setEnabled(false);
                                                        jPanel2.add(jLabel23);
                                                        jLabel23.setBounds(360, 20, 80, 20);

                                                        jLabel24.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel24.setText("Costos Fijos");
                                                        jLabel24.setEnabled(false);
                                                        jPanel2.add(jLabel24);
                                                        jLabel24.setBounds(360, 50, 80, 20);

                                                        jLabel25.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel25.setText("Gastos Fijos");
                                                        jLabel25.setEnabled(false);
                                                        jPanel2.add(jLabel25);
                                                        jLabel25.setBounds(360, 80, 80, 20);

                                                        CF.setBackground(new java.awt.Color(255, 255, 255));
                                                        grupo2.add(CF);
                                                        CF.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        CF.setText("Fijos");
                                                        CF.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                CFActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel2.add(CF);
                                                        CF.setBounds(150, 50, 70, 23);

                                                        IV.setBackground(new java.awt.Color(255, 255, 255));
                                                        grupo1.add(IV);
                                                        IV.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        IV.setSelected(true);
                                                        IV.setText("Variables");
                                                        IV.setToolTipText("Asume que detallaras esta cuenta en la siguiente pesta\u00f1a");
                                                        IV.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                IVActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel2.add(IV);
                                                        IV.setBounds(250, 20, 90, 25);

                                                        IF.setBackground(new java.awt.Color(255, 255, 255));
                                                        grupo1.add(IF);
                                                        IF.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        IF.setText("Fijos");
                                                        IF.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                IFActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel2.add(IF);
                                                        IF.setBounds(150, 20, 70, 23);

                                                        GF.setBackground(new java.awt.Color(255, 255, 255));
                                                        grupo3.add(GF);
                                                        GF.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        GF.setText("Fijos");
                                                        GF.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                GFActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel2.add(GF);
                                                        GF.setBounds(150, 80, 70, 23);

                                                        GV.setBackground(new java.awt.Color(255, 255, 255));
                                                        grupo3.add(GV);
                                                        GV.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        GV.setSelected(true);
                                                        GV.setText("Variables");
                                                        GV.setToolTipText("Asume que detallaras esta cuenta en la siguiente pesta\u00f1a");
                                                        GV.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                GVActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel2.add(GV);
                                                        GV.setBounds(250, 80, 90, 25);

                                                        CV.setBackground(new java.awt.Color(255, 255, 255));
                                                        grupo2.add(CV);
                                                        CV.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        CV.setSelected(true);
                                                        CV.setText("Variables");
                                                        CV.setToolTipText("Asume que detallaras esta cuenta en la siguiente pesta\u00f1a");
                                                        CV.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                CVActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel2.add(CV);
                                                        CV.setBounds(250, 50, 90, 25);

                                                        jLabel26.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        jPanel2.add(jLabel26);
                                                        jLabel26.setBounds(120, 80, 20, 20);

                                                        jLabel27.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        jPanel2.add(jLabel27);
                                                        jLabel27.setBounds(120, 50, 20, 20);

                                                        jLabel28.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        jPanel2.add(jLabel28);
                                                        jLabel28.setBounds(120, 20, 20, 20);

                                                        jLabel29.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        jPanel2.add(jLabel29);
                                                        jLabel29.setBounds(220, 20, 20, 20);

                                                        jLabel30.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        jPanel2.add(jLabel30);
                                                        jLabel30.setBounds(220, 80, 20, 20);

                                                        jLabel31.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        jPanel2.add(jLabel31);
                                                        jLabel31.setBounds(220, 50, 20, 20);

                                                        requerimientos.add(jPanel2);
                                                        jPanel2.setBounds(20, 330, 580, 130);

                                                        fuego.setBackground(new java.awt.Color(51, 153, 255));
                                                        fuego.setIcon(new javax.swing.ImageIcon("Imagenes/vafm0010.gif"));
                                                        requerimientos.add(fuego);
                                                        fuego.setBounds(310, 490, 120, 90);

                                                        jtabbedpane.addTab("Requerimientos",new ImageIcon("Imagenes/copiar.jpg"), requerimientos);

                                                        tablas.setLayout(null);

                                                        tablas.setBackground(new java.awt.Color(255, 255, 255));
                                                        tablas.setEnabled(false);
                                                        jPanel6.setLayout(null);

                                                        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
                                                        jPanel6.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(51, 102, 255), null, null), "Tabla de Financiamiento", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 2, 14)));
                                                        tab_calendario.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        tab_calendario.setModel(new javax.swing.table.DefaultTableModel(
                                                            new Object [][] {
                                                                {null, null, null, null, null}
                                                            },
                                                            new String [] {
                                                                "Año", "Interés", "Cuota", "Pago al Principal", "Saldo"
                                                            }
                                                        ) {
                                                            Class[] types = new Class [] {
                                                                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                                            };
                                                            boolean[] canEdit = new boolean [] {
                                                                false, false, false, false, false
                                                            };

                                                            public Class getColumnClass(int columnIndex) {
                                                                return types [columnIndex];
                                                            }

                                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                                return canEdit [columnIndex];
                                                            }
                                                        });
                                                        tab_calendario.setToolTipText("Aqui se detalla el calendario de pago del prestamo.");
                                                        tab_calendario.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
                                                        tab_calendario.setEnabled(false);
                                                        tab_calendario.setSelectionBackground(new java.awt.Color(204, 204, 204));
                                                        js_calendario.setViewportView(tab_calendario);

                                                        jPanel6.add(js_calendario);
                                                        js_calendario.setBounds(10, 30, 500, 260);

                                                        tablas.add(jPanel6);
                                                        jPanel6.setBounds(130, 240, 520, 300);

                                                        jPanel7.setLayout(null);

                                                        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
                                                        jPanel7.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(51, 102, 255), null, null), "Tabla de Depreciaci\u00f3n", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 2, 14)));
                                                        js_depreciacion.setToolTipText("Tabla de Depreciacion de la inversion.");
                                                        tab_depreciacion.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        tab_depreciacion.setModel(new javax.swing.table.DefaultTableModel(
                                                            new Object [][] {
                                                                {null, null, null}
                                                            },
                                                            new String [] {
                                                                "Año", "Valor en Libros", "Depreciacin"
                                                            }
                                                        ) {
                                                            Class[] types = new Class [] {
                                                                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
                                                            };
                                                            boolean[] canEdit = new boolean [] {
                                                                false, false, false
                                                            };

                                                            public Class getColumnClass(int columnIndex) {
                                                                return types [columnIndex];
                                                            }

                                                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                                                return canEdit [columnIndex];
                                                            }
                                                        });
                                                        tab_depreciacion.setToolTipText("Aqui se presenta la tabla de depreciaci\u00f3n para la inversi\u00f3n");
                                                        tab_depreciacion.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
                                                        tab_depreciacion.setEnabled(false);
                                                        tab_depreciacion.setSelectionBackground(new java.awt.Color(204, 204, 204));
                                                        js_depreciacion.setViewportView(tab_depreciacion);

                                                        jPanel7.add(js_depreciacion);
                                                        js_depreciacion.setBounds(20, 20, 390, 180);

                                                        tablas.add(jPanel7);
                                                        jPanel7.setBounds(160, 10, 430, 220);

                                                        jtabbedpane.addTab("Depreciaci\u00f3n - Calendario",new ImageIcon("Imagenes/esa.jpg"), tablas);

                                                        estado_sf.setLayout(null);

                                                        estado_sf.setBackground(new java.awt.Color(255, 255, 255));
                                                        estado_sf.setEnabled(false);
                                                        jTree2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 102, 255), null, null));
                                                        jTree2.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        jTree2.setToolTipText("Seleccione aqui la cuenta a la que le desea agregar un campo\n");
                                                        jTree2.setEnabled(false);
                                                        jTree2.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                                                            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                                                                jTree2ValueChanged(evt);
                                                            }
                                                        });

                                                        jScrollPane10.setViewportView(jTree2);

                                                        estado_sf.add(jScrollPane10);
                                                        jScrollPane10.setBounds(20, 20, 210, 210);

                                                        jTextArea2.setEditable(false);
                                                        jTextArea2.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        jTextArea2.setText("Estimado Usuario en esta pesta\u00f1a\nse te pemitira detallar los Ingresos,\nCostos, Gastos Operativos de tus\nEstados de Resultados.\n\nEs muy F\u00e1cil de usar; primero elijes\nla opci\u00f3n del \u00e1rbol de detalle de cuentas,\nluego escribes el nombre de la cuenta\npara despues proceder a completar la\nla tabla con sus valores correspondientes.\n\nLuego que completes todas las tablas\ndas clic en \"Calular Total\", para que el\nprograma calcule el total de dicha tabla,\nluego que todas las tablas esten con sus\nrespectivos totales calculados, procede a\niniciar el registro en los Estados de Resultados,\ndando clic en el bot\u00f3n \"Agregar Detalles.\"\n\nHasta luego y que pases Buen D\u00eda.\n\n \n\n\n");
                                                        jTextArea2.setToolTipText("Tips de Ayuda");
                                                        jTextArea2.setDisabledTextColor(new java.awt.Color(51, 51, 51));
                                                        jScrollPane11.setViewportView(jTextArea2);

                                                        estado_sf.add(jScrollPane11);
                                                        jScrollPane11.setBounds(20, 270, 250, 210);

                                                        agregar.setFont(new java.awt.Font("Bodoni MT", 1, 16));
                                                        agregar.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        agregar.setText("Agregar Detalles");
                                                        agregar.setToolTipText("Agrege los  detalles del Estado de Resultado");
                                                        agregar.setEnabled(false);
                                                        agregar.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                agregarActionPerformed(evt);
                                                            }
                                                        });

                                                        estado_sf.add(agregar);
                                                        agregar.setBounds(40, 500, 190, 30);

                                                        jLabel20.setFont(new java.awt.Font("Bodoni MT", 1, 14));
                                                        jLabel20.setText("Modo de Uso.");
                                                        estado_sf.add(jLabel20);
                                                        jLabel20.setBounds(90, 240, 90, 20);

                                                        barra2.setBackground(new java.awt.Color(255, 51, 51));
                                                        barra2.setForeground(new java.awt.Color(0, 0, 0));
                                                        barra2.setVisible(false);
                                                        estado_sf.add(barra2);
                                                        barra2.setBounds(20, 540, 700, 10);

                                                        A.setFont(new java.awt.Font("Bodoni MT", 3, 12));
                                                        A.setForeground(new java.awt.Color(255, 0, 51));
                                                        estado_sf.add(A);
                                                        A.setBounds(730, 530, 30, 30);

                                                        jPanel3.setLayout(null);

                                                        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
                                                        jPanel3.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 102, 255), null, null), "Detalle de Cuentas Variables", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 2, 14)));
                                                        tab_ingresos.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        tab_ingresos.setModel(new javax.swing.table.DefaultTableModel(
                                                            new Object [][] {

                                                            },
                                                            new String [] {
                                                                "Ingresos", " Año 1"
                                                            }
                                                        ) {
                                                            Class[] types = new Class [] {
                                                                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                                            };
                                                            boolean[] canEdit = new boolean [] {
                                                                false, true
                                                            };
                                                            public Class getColumnClass(int columnIndex) {
                                                                return types [columnIndex];
                                                            }
                                                        });
                                                        tab_ingresos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                                                        tab_ingresos.setEnabled(false);
                                                        js_ingresos.setViewportView(tab_ingresos);

                                                        jPanel3.add(js_ingresos);
                                                        js_ingresos.setBounds(50, 60, 390, 110);

                                                        SubTotalIngresos.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        SubTotalIngresos.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        SubTotalIngresos.setText("Calcular Total");
                                                        SubTotalIngresos.setToolTipText("Calcular el total de los detalles de los Ingresos.");
                                                        SubTotalIngresos.setEnabled(false);
                                                        SubTotalIngresos.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                SubTotalIngresosActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel3.add(SubTotalIngresos);
                                                        SubTotalIngresos.setBounds(320, 20, 120, 29);

                                                        jLabel16.setFont(new java.awt.Font("Bodoni MT", 2, 18));
                                                        jLabel16.setText(" Ingresos");
                                                        jPanel3.add(jLabel16);
                                                        jLabel16.setBounds(200, 30, 80, 20);

                                                        jLabel17.setFont(new java.awt.Font("Bodoni MT", 2, 18));
                                                        jLabel17.setText(" Costos");
                                                        jPanel3.add(jLabel17);
                                                        jLabel17.setBounds(200, 190, 60, 20);

                                                        SubTotalCostos.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        SubTotalCostos.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        SubTotalCostos.setText("Calcular Total");
                                                        SubTotalCostos.setToolTipText("Calcular el total de los detalles de los Costos.");
                                                        SubTotalCostos.setEnabled(false);
                                                        SubTotalCostos.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                SubTotalCostosActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel3.add(SubTotalCostos);
                                                        SubTotalCostos.setBounds(320, 180, 120, 29);

                                                        tab_costos.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        tab_costos.setModel(new javax.swing.table.DefaultTableModel(
                                                            new Object [][] {

                                                            },
                                                            new String [] {
                                                                "Costos", " Año 1"
                                                            }
                                                        ) {
                                                            Class[] types = new Class [] {
                                                                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                                            };
                                                            boolean[] canEdit = new boolean [] {
                                                                false, true
                                                            };
                                                            public Class getColumnClass(int columnIndex) {
                                                                return types [columnIndex];
                                                            }
                                                        });
                                                        tab_costos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                                                        tab_costos.setEnabled(false);
                                                        js_costos.setViewportView(tab_costos);

                                                        jPanel3.add(js_costos);
                                                        js_costos.setBounds(50, 220, 390, 110);

                                                        jLabel18.setFont(new java.awt.Font("Bodoni MT", 2, 18));
                                                        jLabel18.setText(" Gastos Operativos");
                                                        jPanel3.add(jLabel18);
                                                        jLabel18.setBounds(150, 350, 150, 20);

                                                        tab_gastos.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        tab_gastos.setModel(new javax.swing.table.DefaultTableModel(
                                                            new Object [][] {

                                                            },
                                                            new String [] {
                                                                "Gastos", " Año 1"
                                                            }
                                                        ) {
                                                            Class[] types = new Class [] {
                                                                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                                            };
                                                            boolean[] canEdit = new boolean [] {
                                                                false, true
                                                            };
                                                            public Class getColumnClass(int columnIndex) {
                                                                return types [columnIndex];
                                                            }
                                                        });
                                                        tab_gastos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                                                        tab_gastos.setEnabled(false);
                                                        js_gastos.setViewportView(tab_gastos);

                                                        jPanel3.add(js_gastos);
                                                        js_gastos.setBounds(50, 380, 390, 110);

                                                        SubTotalGastos.setFont(new java.awt.Font("Bodoni MT", 0, 14));
                                                        SubTotalGastos.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        SubTotalGastos.setText("Calcular Total");
                                                        SubTotalGastos.setToolTipText("Calcular el total de los detalles de los Gastos Operativos.");
                                                        SubTotalGastos.setEnabled(false);
                                                        SubTotalGastos.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                SubTotalGastosActionPerformed(evt);
                                                            }
                                                        });

                                                        jPanel3.add(SubTotalGastos);
                                                        SubTotalGastos.setBounds(320, 340, 120, 29);

                                                        estado_sf.add(jPanel3);
                                                        jPanel3.setBounds(280, 10, 460, 520);

                                                        jtabbedpane.addTab("Elaboraci\u00f3n de cuentas",new ImageIcon("Imagenes/calcular.gif"), estado_sf);

                                                        estados.setLayout(null);

                                                        estados.setBackground(new java.awt.Color(255, 255, 255));
                                                        estados.setEnabled(false);
                                                        finale.setFont(new java.awt.Font("Bodoni MT", 2, 16));
                                                        finale.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        finale.setText("V.P.N C.F");
                                                        finale.setToolTipText("Valor Presente Neto Con Financiamiento.");
                                                        finale.setEnabled(false);
                                                        finale.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                finaleActionPerformed(evt);
                                                            }
                                                        });

                                                        estados.add(finale);
                                                        finale.setBounds(390, 530, 130, 29);

                                                        jProgressBar1.setBackground(new java.awt.Color(255, 102, 102));
                                                        jProgressBar1.setForeground(new java.awt.Color(0, 0, 0));
                                                        estados.add(jProgressBar1);
                                                        jProgressBar1.setBounds(70, 510, 600, 10);

                                                        jLabel32.setFont(new java.awt.Font("Bodoni MT", 0, 12));
                                                        estados.add(jLabel32);
                                                        jLabel32.setBounds(540, 530, 0, 0);

                                                        jPanel8.setLayout(null);

                                                        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
                                                        jPanel8.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 102, 255), null, null), "Estados de Resultados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 2, 14)));
                                                        js_er1.setBackground(new java.awt.Color(204, 204, 204));
                                                        tabla1.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        tabla1.setModel(new javax.swing.table.DefaultTableModel(
                                                            new Object [][] {

                                                            },
                                                            new String [] {
                                                                "Años", " Año 1"
                                                            }
                                                        ) {
                                                            Class[] types = new Class [] {
                                                                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                                            };
                                                            boolean[] canEdit = new boolean [] {
                                                                false, true
                                                            };
                                                            public Class getColumnClass(int columnIndex) {
                                                                return types [columnIndex];
                                                            }
                                                        });
                                                        tabla1.setToolTipText("En esta tabla usted Introducira los Valores para el estado de Resultado cuando este listo, haga clic en aceptar.");
                                                        tabla1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                                                        js_er1.setViewportView(tabla1);

                                                        jPanel8.add(js_er1);
                                                        js_er1.setBounds(30, 40, 550, 220);

                                                        js_er2.setBackground(new java.awt.Color(204, 204, 204));
                                                        js_er2.setToolTipText("");
                                                        js_er2.setFont(new java.awt.Font("Bangle", 0, 12));
                                                        tabla2.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        tabla2.setModel( new javax.swing.table.DefaultTableModel(
                                                            new Object [][] {

                                                            },
                                                            new String [] {
                                                                "Años", " Año 1"
                                                            }
                                                        ) {
                                                            Class[] types = new Class [] {
                                                                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                                            };
                                                            boolean[] canEdit = new boolean [] {
                                                                false, true
                                                            };
                                                            public Class getColumnClass(int columnIndex) {
                                                                return types [columnIndex];
                                                            }
                                                        });
                                                        tabla2.setToolTipText("Estado de Resultado sin financiamiento mas que todo es para poder visualizar las comparaciones entre el Estado de resultado Financiado y el no Financiado.");
                                                        tabla2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                                                        js_er2.setViewportView(tabla2);

                                                        jPanel8.add(js_er2);
                                                        js_er2.setBounds(30, 290, 550, 190);

                                                        jLabel13.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        jLabel13.setText("Financiado");
                                                        jPanel8.add(jLabel13);
                                                        jLabel13.setBounds(30, 20, 190, 20);

                                                        jLabel14.setFont(new java.awt.Font("Bodoni MT", 2, 14));
                                                        jLabel14.setText("No Financiado");
                                                        jPanel8.add(jLabel14);
                                                        jLabel14.setBounds(30, 270, 190, 20);

                                                        estados.add(jPanel8);
                                                        jPanel8.setBounds(70, 10, 600, 500);

                                                        jtabbedpane.addTab("Estados de Resultados",new ImageIcon("Imagenes/estado.gif"), estados);

                                                        jPanel1.add(jtabbedpane);
                                                        jtabbedpane.setBounds(20, 20, 770, 600);

                                                        getContentPane().add(jPanel1);
                                                        jPanel1.setBounds(0, 0, 920, 690);

                                                        Archivo.setText("Archivo");
                                                        Archivo.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        Archivo.add(jSeparator23);

                                                        Archivo.add(jSeparator24);

                                                       
                                                       

                                                        Archivo.add(jSeparator1);

                                                        Salir.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        Salir.setIcon(new javax.swing.ImageIcon("Imagenes/Cerrar.JPG"));
                                                        Salir.setText("Salir");
                                                        Salir.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                SalirActionPerformed(evt);
                                                            }
                                                        });

                                                        Archivo.add(Salir);

                                                        Archivo.add(jSeparator21);

                                                        Archivo.add(jSeparator22);

                                                        jMenuBar1.add(Archivo);

                                                        jMenu1.setText("Herramientas");
                                                        jMenu1.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        Imprimir.setText("Imprimir");
                                                        Imprimir.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator3);

                                                        jSeparator11.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator11.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator11.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator11);

                                                        imp_depreciacion.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        imp_depreciacion.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        imp_depreciacion.setText("Tabla de Depreciacion");
                                                        imp_depreciacion.setToolTipText("Imprima la Tablade Depreciacion");
                                                        imp_depreciacion.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                imp_depreciacionActionPerformed(evt);
                                                            }
                                                        });

                                                        Imprimir.add(imp_depreciacion);

                                                        jSeparator6.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator6.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator6);

                                                        imp_calendario.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        imp_calendario.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        imp_calendario.setText("Calendario de Pago");
                                                        imp_calendario.setToolTipText("Imprima el calendario de pargo del financiamiento");
                                                        imp_calendario.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                imp_calendarioActionPerformed(evt);
                                                            }
                                                        });

                                                        Imprimir.add(imp_calendario);

                                                        jSeparator5.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator5.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator5);

                                                        imp_detalleingresos.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        imp_detalleingresos.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        imp_detalleingresos.setText("Detalle de Ingresos");
                                                        imp_detalleingresos.setToolTipText("Conserve una copia Impresa de los  detalles de Ingresos.");
                                                        imp_detalleingresos.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                imp_detalleingresosActionPerformed(evt);
                                                            }
                                                        });

                                                        Imprimir.add(imp_detalleingresos);

                                                        jSeparator8.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator8.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator8.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator8);

                                                        imp_detallecostos.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        imp_detallecostos.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        imp_detallecostos.setText("Detalle de Costos");
                                                        imp_detallecostos.setToolTipText("Conserve una copia de los detalles de costos de la inversi\u00f3n.");
                                                        imp_detallecostos.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                imp_detallecostosActionPerformed(evt);
                                                            }
                                                        });

                                                        Imprimir.add(imp_detallecostos);

                                                        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator4);

                                                        imp_detallegast.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        imp_detallegast.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        imp_detallegast.setText("Detalle de Gastos Operativos");
                                                        imp_detallegast.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                imp_detallegastActionPerformed(evt);
                                                            }
                                                        });

                                                        Imprimir.add(imp_detallegast);

                                                        jSeparator9.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator9.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator9.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator9);

                                                        imp_estadof.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        imp_estadof.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        imp_estadof.setText("Estado de Resutltado financiado");
                                                        imp_estadof.setToolTipText("Conserve una copia del Estado de Resultado Financiado de la Inversi\u00f3n.\n");
                                                        imp_estadof.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                imp_estadofActionPerformed(evt);
                                                            }
                                                        });

                                                        Imprimir.add(imp_estadof);

                                                        jSeparator7.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator7.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator7.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator7);

                                                        imp_estadonf.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        imp_estadonf.setIcon(new javax.swing.ImageIcon("Imagenes/rbr.gif"));
                                                        imp_estadonf.setText("Estado de Resultado sin Financiamiento");
                                                        imp_estadonf.setToolTipText("Conserve una copia de l Estaod de Resultado sin Financiamiento");
                                                        imp_estadonf.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                imp_estadonfActionPerformed(evt);
                                                            }
                                                        });

                                                        Imprimir.add(imp_estadonf);

                                                        jSeparator10.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator10.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator10.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        Imprimir.add(jSeparator10);

                                                        Imprimir.add(jSeparator30);

                                                        jMenu1.add(Imprimir);

                                                        excel.setText("Enviar a Excel..");
                                                        excel.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        jSeparator20.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator20.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator20.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator20);

                                                        jSeparator12.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator12.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator12.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator12);

                                                        exceldepreciacion1.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        exceldepreciacion1.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        exceldepreciacion1.setText("Tabla de Depreciacion");
                                                        exceldepreciacion1.setToolTipText("Mande a excel  la Tablade Depreciacion");
                                                        exceldepreciacion1.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                exceldepreciacion1ActionPerformed(evt);
                                                            }
                                                        });

                                                        excel.add(exceldepreciacion1);

                                                        jSeparator14.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator14.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator14.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator14);

                                                        excelcalendario1.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        excelcalendario1.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        excelcalendario1.setText("Calendario de Pago");
                                                        excelcalendario1.setToolTipText("Mande a Excel el calendario de pargo del financiamiento");
                                                        excelcalendario1.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                excelcalendario1ActionPerformed(evt);
                                                            }
                                                        });

                                                        excel.add(excelcalendario1);

                                                        jSeparator15.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator15.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator15.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator15);

                                                        exceldetalleingresos1.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        exceldetalleingresos1.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        exceldetalleingresos1.setText("Detalle de Ingresos");
                                                        exceldetalleingresos1.setToolTipText("Mande a Excel los  detalles de Ingresos.");
                                                        exceldetalleingresos1.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                exceldetalleingresos1ActionPerformed(evt);
                                                            }
                                                        });

                                                        excel.add(exceldetalleingresos1);

                                                        jSeparator16.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator16.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator16.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator16);

                                                        exceldetallecostos1.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        exceldetallecostos1.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        exceldetallecostos1.setText("Detalle de Costos");
                                                        exceldetallecostos1.setToolTipText("Mande a Excel  el detalle de costo de la inversi\u00f3n.");
                                                        exceldetallecostos1.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                exceldetallecostos1ActionPerformed(evt);
                                                            }
                                                        });

                                                        excel.add(exceldetallecostos1);

                                                        jSeparator13.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator13.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator13.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator13);

                                                        exceldetallegastos.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        exceldetallegastos.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        exceldetallegastos.setText("Detalle de Gastos Operativos");
                                                        exceldetallegastos.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                exceldetallegastosActionPerformed(evt);
                                                            }
                                                        });

                                                        excel.add(exceldetallegastos);

                                                        jSeparator18.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator18.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator18.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator18);

                                                        excelestadonf1.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        excelestadonf1.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        excelestadonf1.setText("Estado de Resultado sin Financiamiento");
                                                        excelestadonf1.setToolTipText("Mande a Excel el estado de Resultado Financiado.\n");
                                                        excelestadonf1.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                excelestadonf1ActionPerformed(evt);
                                                            }
                                                        });

                                                        excel.add(excelestadonf1);

                                                        jSeparator17.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator17.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator17.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator17);

                                                        excelestadof1.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        excelestadof1.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        excelestadof1.setText("Estado de Resutltado financiado");
                                                        excelestadof1.setToolTipText("Mande a Excel el Estado de Resultado Financiado de la Inversi\u00f3n.\n");
                                                        excelestadof1.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                excelestadof1ActionPerformed(evt);
                                                            }
                                                        });

                                                        excel.add(excelestadof1);

                                                        jSeparator19.setBackground(new java.awt.Color(0, 0, 0));
                                                        jSeparator19.setForeground(new java.awt.Color(0, 0, 0));
                                                        jSeparator19.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
                                                        excel.add(jSeparator19);

                                                        excel.add(jSeparator29);

                                                        jMenu1.add(excel);

                                                        jMenu2.setText("Calculadora");
                                                        jMenu2.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        calculadora.setFont(new java.awt.Font("Bodoni MT", 3, 14));
                                                        calculadora.setIcon(new javax.swing.ImageIcon("Imagenes/rbs.gif"));
                                                        calculadora.setText("Implicita de Windows");
                                                        calculadora.setToolTipText("Utilize la calculadora de Windows\n");
                                                        calculadora.addActionListener(new java.awt.event.ActionListener() {
                                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                                calculadoraActionPerformed(evt);
                                                            }
                                                        });

                                                        jMenu2.add(calculadora);

                                                        jMenu1.add(jMenu2);

                                                        jMenuBar1.add(jMenu1);

                                                        setJMenuBar(jMenuBar1);
														setFrameIcon(new ImageIcon("velo.gif"));
                                                        setVisible(true);
                                                    	setBackground(Color.black);
                                                    	setSize(920,690);
                                                    	setResizable(true);
                                                    	
                                                    	}
                                                    // </editor-fold>//GEN-END:initComponents

    private void finaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finaleActionPerformed
// TODO add your handling code here:
        double capital=0, tmixta=0, semi_suma1=0,vpn=0,vpn1=0,semi_suma=0;
        capital = inversion - financiamiento;
        tmixta = ((interes)*(financiamiento/inversion) + (tmar)*(capital/inversion))*(100);
        tmixta /=100;
        System.out.print("Tmar mixta        "+tmixta);        
        
        for(int ik = 1; ik <= vutil;ik++) {
            semi_suma1 += Trasladar.PF(FNE1[ik],tmixta,ik);
            System.out.println(" semi suma"+semi_suma1);
        }
        //capital = inversion - fin;        
        System.out.println();        
        vpn1 = -inversion + financiamiento + semi_suma1 + (Trasladar.PF(vsalvamento, tmixta, vutil));
        System.out.println("Valor Presente Neto evaluado con TMAR MixtaC$ "+vpn1);        
        JOptionPane.showMessageDialog(null,"El Valor Presente Neto con Financiamiento es : C$ "+round(vpn1),"Valor Presente Neto",JOptionPane.INFORMATION_MESSAGE);
        
        for(int f = 1; f <= vutil;f++) {
            semi_suma += Trasladar.PF(FNE2[f],tmar,f);
        }
        
        vpn = -inversion + semi_suma +Trasladar.PF(vsalvamento,tmar,vutil);
        System.out.println();
        System.out.println("Valor Presente Neto C$ "+vpn);
        
        JOptionPane.showMessageDialog(null,"El Valor Presente Neto sin Financiamiento es : C$ "+round(vpn),"Valor Presente Neto",JOptionPane.INFORMATION_MESSAGE);
        
        if(vpn<0 && vpn1<0) {
            JOptionPane.showMessageDialog(null,"La inverisión con y sin financiamientos generan pérdida","Valor Presente Neto",JOptionPane.INFORMATION_MESSAGE);
        } else {
            if(vpn > vpn1) {
                JOptionPane.showMessageDialog(null,"La inverisión es conveniente hacerla con financiamiento","Valor Presente Neto",JOptionPane.INFORMATION_MESSAGE);
            }
            if(vpn < vpn1) {
                JOptionPane.showMessageDialog(null,"La inverisión es conveniente hacerla sin financiamiento","Valor Presente Neto",JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_finaleActionPerformed
    
    private void exceldetalleingresos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exceldetalleingresos1ActionPerformed
// TODO add your handling code here:
         if(tab_ingresos.getRowCount()== 0){
             JOptionPane.showMessageDialog(null,"Primero debe concluir todos los calculos","Error de Impresion",JOptionPane.ERROR_MESSAGE);
        }else{
             try{
             AExcel.crearExcel("ValorPresente.xls","Detalle de Ingresos",tab_ingresos.getModel());
             }catch(Exception e){JOptionPane.showMessageDialog(null,"Error al encontrar el archivo","Error de Impresion",JOptionPane.ERROR_MESSAGE);}
       }
    }//GEN-LAST:event_exceldetalleingresos1ActionPerformed
    
    private void imp_detallegastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_detallegastActionPerformed
// TODO add your handling code here:
        imprimir=5;
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintObject());
        job.printDialog();
        
        if (job.printDialog()) {
            try { job.print(); } catch (PrinterException excep) { System.out.println(excep); }
        }
    }//GEN-LAST:event_imp_detallegastActionPerformed
    
    private void calculadoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculadoraActionPerformed
        try {
            Runtime rt = Runtime.getRuntime();
            Process p = rt.exec("calc.exe");
            p.waitFor();
            
        } catch ( IOException ioe ) {
            ioe.printStackTrace();
        } catch ( InterruptedException ie ) {
            ie.printStackTrace();
        }
    }//GEN-LAST:event_calculadoraActionPerformed
    
    private void excelestadof1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelestadof1ActionPerformed
 if(tabla1.getRowCount()== 0){
             JOptionPane.showMessageDialog(null,"Primero debe concluir todos los calculos","Error de Impresion",JOptionPane.ERROR_MESSAGE);
        }else{
             try{
                AExcel.crearExcel("ValorPresente.xls","Estado de Resultado C.F.",tabla1.getModel());
             } catch(Exception e){JOptionPane.showMessageDialog(null,"Error al encontrar el archivo","Error de Impresion",JOptionPane.ERROR_MESSAGE);}
     }
   }//GEN-LAST:event_excelestadof1ActionPerformed
    
    private void excelestadonf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelestadonf1ActionPerformed
    if(tabla2.getRowCount()== 0){
             JOptionPane.showMessageDialog(null,"Primero debe concluir todos los calculos","Error de Impresion",JOptionPane.ERROR_MESSAGE);
        }else{
        try{
             AExcel.crearExcel("ValorPresente.xls","Estado de Resultado N.F",tabla2.getModel());
        }catch(Exception e){JOptionPane.showMessageDialog(null,"Error al encontrar el archivo","Error de Impresion",JOptionPane.ERROR_MESSAGE);}
        }
    }//GEN-LAST:event_excelestadonf1ActionPerformed
    
    private void exceldetallegastosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exceldetallegastosActionPerformed
        if(tab_gastos.getRowCount()== 0){
             JOptionPane.showMessageDialog(null,"Primero debe concluir todos los calculos","Error de Impresion",JOptionPane.ERROR_MESSAGE);
        }else{
            try{
             AExcel.crearExcel("ValorPresente.xls","Gastos Operativos",tab_gastos.getModel());
            }catch(Exception e){JOptionPane.showMessageDialog(null,"Error al encontrar el archivo","Error de Impresion",JOptionPane.ERROR_MESSAGE);}
            }
    }//GEN-LAST:event_exceldetallegastosActionPerformed
    
    private void exceldetallecostos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exceldetallecostos1ActionPerformed
 if(tab_costos.getRowCount()== 0){
             JOptionPane.showMessageDialog(null,"Primero debe concluir todos los calculos","Error de Impresión",JOptionPane.ERROR_MESSAGE);
       }else{
     try{
             AExcel.crearExcel("ValorPresente.xls","Detalle de Costos",tab_costos.getModel());
     }catch(Exception e){JOptionPane.showMessageDialog(null,"Error al encontrar el archivo","Error de Impresion",JOptionPane.ERROR_MESSAGE);}
     }
    }//GEN-LAST:event_exceldetallecostos1ActionPerformed
    
    private void excelcalendario1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelcalendario1ActionPerformed
     if(tab_calendario.getRowCount()== 0){
             JOptionPane.showMessageDialog(null,"Primero debe concluir todos los calculos","Error de Impresion",JOptionPane.ERROR_MESSAGE);
        }else{
         try{
             AExcel.crearExcel("ValorPresente.xls","Tabla de Financiamiento",tab_calendario.getModel());
         }catch(Exception e){JOptionPane.showMessageDialog(null,"Error al encontrar el archivo","Error de Impresion",JOptionPane.ERROR_MESSAGE);}
         }
    }//GEN-LAST:event_excelcalendario1ActionPerformed
    
    private void exceldepreciacion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exceldepreciacion1ActionPerformed
 if(tab_depreciacion.getRowCount()== 0){
            JOptionPane.showMessageDialog(null,"Primero debe concluir todos los calculos","Error de Impresion",JOptionPane.ERROR_MESSAGE);
        }else{
            try{
             AExcel.crearExcel("ValorPresente.xls","Depreciación",tab_depreciacion.getModel());
            }catch(Exception e){JOptionPane.showMessageDialog(null,"Error al encontrar el archivo","Error de Impresion",JOptionPane.ERROR_MESSAGE);}
           }
   }//GEN-LAST:event_exceldepreciacion1ActionPerformed
    
    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        CalcularEstadoResultados(); //metodo que calcula los dos estados de resultados
        DibujarEstadosResultados();
        hilo2 = new Carga3();
        hilo2.start();//barra
        finale.setEnabled(true);
   
    }//GEN-LAST:event_agregarActionPerformed
    public void DibujarEstadosResultados(){
        for(int i = 1; i <= vutil; i++)   {
            modelotabla1 = (DefaultTableModel)tabla1.getModel();
            tabla1.setValueAt(round(var_ingresos[i]),0,i);//
            tabla1.setValueAt(round(var_costos[i]),1,i);//
            tabla1.setValueAt(round(Ik[i]),2,i);//
            tabla1.setValueAt(round(vdepreciacion[i]),3,i);//
            tabla1.setValueAt(round(ub1[i]),4,i);//
            tabla1.setValueAt(round(var_gastos[i]),5,i);//
            tabla1.setValueAt(round(uop1[i]),6,i);//
            tabla1.setValueAt(round(impuesto1[i]),7,i);//
            tabla1.setValueAt(round(uop_1[i]),8,i);  //
            tabla1.setValueAt(round(vdepreciacion[i]),9,i);//
            tabla1.setValueAt(round(pp[i]),10,i);//
            tabla1.setValueAt(round(FNE1[i]),11,i);//
            
            modelotabla2 = (DefaultTableModel)tabla2.getModel();
            tabla2.setValueAt(round(var_ingresos[i]),0,i);//
            tabla2.setValueAt(round(var_costos[i]),1,i);//
            tabla2.setValueAt(round(vdepreciacion[i]),2,i);//
            tabla2.setValueAt(round(ub2[i]),3,i);//
            tabla2.setValueAt(round(var_gastos[i]),4,i);//
            tabla2.setValueAt(round(uop2[i]),5,i);//
            tabla2.setValueAt(round(impuesto2[i]),6,i);//
            tabla2.setValueAt(round(uop_2[i]),7,i);  //
            tabla2.setValueAt(round(vdepreciacion[i]),8,i);//
            tabla2.setValueAt(round(FNE2[i]),9,i);//
        }
        //si es mejor financiado retorna 1
        //si es mejor no financiado retorna 2
        //int opcion = Finale.ValorPresente(FNE1[],FNE[],i);
        agregar.setEnabled(false);
        tabla1.setEnabled(false);
        tabla2.setEnabled(false);
    }
    private void SubTotalGastosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubTotalGastosActionPerformed
        boolean escapar = false;
        if(tab_gastos.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null,"No Hay filas para realzar suma; agregue las filas y luego completelas","Error en el sistema",JOptionPane.ERROR_MESSAGE);
        } else{
            int result = JOptionPane.showConfirmDialog((Component) null, "¿Está seguro de los detalles de Gastos?","Confirmación del Sistema",JOptionPane.YES_NO_OPTION);
            var_gastos = new double[100]; //suma de gastos por columnas
            if(result == JOptionPane.YES_OPTION) {
                try {
                    for(int i = 1; i <= vutil; i++) {
                        System.out.println("i = "+i);
                        for(int j = 0; j < tab_gastos.getRowCount(); j++) {
                            System.out.println("j = "+j);
                            if(tab_gastos.getValueAt(j,i)==null) {
                                System.out.println("celda vacia");
                                int result2 = JOptionPane.showConfirmDialog((Component) null, "En la tabla de Gastos Operativos hay celdas vacias\nColumna: "+i+" Fila "+j+"\n ¿Desea que el programa asuma estos con un valor '0'?","Confirmación del Sistema",JOptionPane.YES_NO_OPTION);
                                
                                if(result2 == JOptionPane.NO_OPTION) {
                                    JOptionPane.showMessageDialog(null,"Proceda a completar las celdas vacias","Advertencia del Sistema",JOptionPane.WARNING_MESSAGE);
                                    j = 100000;    //malavar para quebrar el ciclo y salir del metodo
                                    i = 100000;
                                    escapar = true;
                                } else {
                                    var_gastos[i] += 0;
                                }
                            } else {
                                Double n = (Double)tab_gastos.getValueAt(j,i);
                                var_gastos[i] += n.doubleValue();
                                System.out.println("var_gastos  ="+var_gastos[i]);
                            }
                        }
                    }
                    if(escapar == false) {
                        Vector total = new Vector();
                        total.add("Total");
                        for(int k = 1; k <= vutil; k++) {
                            total.add(var_gastos[k]);
                        }
                        modelogasto.addRow(total);
                        SubTotalGastos.setEnabled(false);
                        tab_gastos.setEnabled(false);
                        per1 = true;
                        
                        if(per1==true && per2 == true && per3 == true) {
                            agregar.setEnabled(true);
                            jTree2.setEnabled(false);
                            JOptionPane.showMessageDialog(null,"Procedaa agregar los detalles\nde Cuentas variables al Estado de Resultado","Información del Sistema",JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            agregar.setEnabled(false);
                        }
                        
                    }
                } catch(Exception error){
                    System.out.println("Error de lectura"+error);
                    JOptionPane.showMessageDialog(null,"Error al Capturar los datos, no prodra visualizar correctamente los datos","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                }
                hilo2 = new Carga2();
                hilo2.start();//barra
                
            } else {
                JOptionPane.showMessageDialog(null,"Proceda cuando este listo","Advertencia del Sistema",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_SubTotalGastosActionPerformed
    
    private void SubTotalCostosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubTotalCostosActionPerformed
        boolean escapar = false;
        if(tab_costos.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null,"No Hay filas para realzar suma; agregue las filas y luego completelas","Error en el sistema",JOptionPane.ERROR_MESSAGE);
        } else {
            int result = JOptionPane.showConfirmDialog((Component) null, "¿Está seguro de los detalles de Costos?","Confirmación del Sistema",JOptionPane.YES_NO_OPTION);
            var_costos = new double[100]; //suma de gastos por columnas
            
            if(result == JOptionPane.YES_OPTION) {
                try {
                    for(int i = 1; i <= vutil; i++) //avanzar en columnas
                    {
                        System.out.println("i = "+i);
                        for(int j = 0; j < tab_costos.getRowCount(); j++) //avanzar en filas
                        {
                            System.out.println("j = "+j);
                            if(tab_costos.getValueAt(j,i)==null)    //la celda no contiene nada
                            {
                                System.out.println("celda vacia");
                                int result2 = JOptionPane.showConfirmDialog((Component) null, "En la tabla de Costos hay celdas vacias\nColumna: "+i+" Fila "+j+"\n ¿Desea que el programa asuma estos con un valor '0'?","Confirmación del Sistema",JOptionPane.YES_NO_OPTION);
                                
                                if(result2 == JOptionPane.NO_OPTION)    //el usuario rellenara los campos faltantes
                                {
                                    JOptionPane.showMessageDialog(null,"Proceda a completar las celdas vacias","Advertencia del Sistema",JOptionPane.WARNING_MESSAGE);
                                    j = 10000;    //malavar para quebrar el ciclo y salir del metodo
                                    i = 10000;
                                    escapar = true;
                                } else    //el usuario quiere hacer cero este valor
                                {
                                    var_costos[i] += 0;
                                }
                            } else {
                                Double n = (Double)tab_costos.getValueAt(j,i);
                                var_costos[i] += n.doubleValue();
                                System.out.println("var_costos  ="+var_costos[i]);
                            }
                        }
                    }
                    if(escapar == false) {
                        Vector total = new Vector();
                        total.add("Total");
                        for(int k = 1; k <= vutil; k++) {
                            total.add(var_costos[k]);
                        }
                        modelocosto.addRow(total);
                        SubTotalCostos.setEnabled(false);
                        tab_costos.setEnabled(false);
                        per2 = true;
                        if(per1==true && per2 == true && per3 == true) {
                            agregar.setEnabled(true);
                            jTree2.setEnabled(false);
                            JOptionPane.showMessageDialog(null,"Procedaa agregar los detalles\nde Cuentas variables al Estado de Resultado","Información del Sistema",JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            agregar.setEnabled(false);
                        }
                    }
                } catch(Exception error){
                    System.out.println("Exception"+error);
                    JOptionPane.showMessageDialog(null,"Error al Capturar los datos, no prodra visualizar correctamente los datos","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                }
                hilo2 = new Carga2();
                hilo2.start();//barra
            } else {
                JOptionPane.showMessageDialog(null,"Proceda cuando este listo","Advertencia del Sistema",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_SubTotalCostosActionPerformed
    
    private void SubTotalIngresosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubTotalIngresosActionPerformed
        boolean escapar = false;
        if(tab_ingresos.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null,"No Hay filas para realzar suma; agregue las filas y luego completelas","Error en el sistema",JOptionPane.ERROR_MESSAGE);
        } else {
            
            int result = JOptionPane.showConfirmDialog((Component) null, "¿Está seguro de los detalles de Ingresos?","Confirmación del Sistema",JOptionPane.YES_NO_OPTION);
            var_ingresos = new double[100]; //suma de gastos por columnas
            
            if(result == JOptionPane.YES_OPTION) {
                try {
                    for(int i = 1; i <= vutil; i++) {
                        System.out.println("i = "+i);
                        for(int j = 0; j < tab_ingresos.getRowCount(); j++) {
                            System.out.println("j = "+j);
                            if(tab_ingresos.getValueAt(j,i)==null) {
                                System.out.println("celda vacia");
                                int result2 = JOptionPane.showConfirmDialog((Component) null, "En la tabla de Ingresos hay celdas vacias\nColumna: "+i+" Fila "+j+"\n ¿Desea que el programa asuma estos con un valor '0'?","Confirmación del Sistema",JOptionPane.YES_NO_OPTION);
                                
                                if(result2 == JOptionPane.NO_OPTION) {
                                    JOptionPane.showMessageDialog(null,"Proceda a completar las celdas vacias","Advertencia del Sistema",JOptionPane.WARNING_MESSAGE);
                                    j = 10000;    //malavar para quebrar el ciclo y salir del metodo
                                    i = 10000;
                                    escapar = true;
                                } else {
                                    var_ingresos[i] += 0;
                                }
                            } else {
                                Double n = (Double)tab_ingresos.getValueAt(j,i);
                                var_ingresos[i] += n.doubleValue();
                                System.out.println("var_ingresos  ="+var_ingresos[i]);
                            }
                        }
                    }
                    if(escapar == false) {
                        Vector total = new Vector();
                        total.add("Total");
                        for(int k = 1; k <= vutil; k++) {
                            total.add(var_ingresos[k]);
                        }
                        modeloingreso.addRow(total);
                        
                        SubTotalIngresos.setEnabled(false);
                        tab_ingresos.setEnabled(false);
                        per3 = true;
                        if( per1==true && per2 == true && per3 == true) {
                            agregar.setEnabled(true);
                            jTree2.setEnabled(false);
                            JOptionPane.showMessageDialog(null,"Procedaa agregar los detalles\nde Cuentas variables al Estado de Resultado","Información del Sistema",JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            agregar.setEnabled(false);
                        }
                    }
                } catch(Exception error){
                    System.out.println("Exception "+error);
                    JOptionPane.showMessageDialog(null,"Error al Capturar los datos, no prodra visualizar correctamente los datos","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                }
                hilo2 = new Carga2();
                hilo2.start();//barra
            } else {
                JOptionPane.showMessageDialog(null,"Proceda cuando este listo","Advertencia del Sistema",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_SubTotalIngresosActionPerformed
    
    private void GVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GVActionPerformed
// TODO add your handling code here:
        if(GV.isSelected() == true) {
            tipoGasto = "variable";
            jLabel25.setEnabled(false);
            GF.setSelected(false);
            txtgastos.setEnabled(false);
            txtgastos.requestFocus();
        }
    }//GEN-LAST:event_GVActionPerformed
    
    private void CVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CVActionPerformed
// TODO add your handling code here:
        if(CV.isSelected() == true) {
            tipoCosto = "variable";
            jLabel24.setEnabled(false);
            CF.setSelected(false);
            txtcostos.setEnabled(false);
            txtcostos.requestFocus();
        }
    }//GEN-LAST:event_CVActionPerformed
    
    private void IVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IVActionPerformed
// TODO add your handling code here:
        if(IV.isSelected() == true) {
            tipoIngreso = "variable";
            jLabel23.setEnabled(false);
            IF.setSelected(false);
            txtingresos.setEnabled(false);
            txtingresos.requestFocus();
        }
    }//GEN-LAST:event_IVActionPerformed
    
    private void GFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GFActionPerformed
// TODO add your handling code here:
        if(GF.isSelected() == true) {
            tipoGasto = "fijo";
            jLabel25.setEnabled(true);
            GV.setSelected(false);
            txtgastos.setEnabled(true);
            txtgastos.requestFocus();
        }
    }//GEN-LAST:event_GFActionPerformed
    
    private void CFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFActionPerformed
// TODO add your handling code here:
        if(CF.isSelected() == true) {
            tipoCosto = "fijo";
            jLabel24.setEnabled(true);
            CV.setSelected(false);
            txtcostos.setEnabled(true);
            txtcostos.requestFocus();
        }
    }//GEN-LAST:event_CFActionPerformed
    
    private void IFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IFActionPerformed
// TODO add your handling code here:
        if(IF.isSelected() == true) {
            tipoIngreso = "fijo";
            jLabel23.setEnabled(true);
            txtingresos.setEnabled(true);
            txtingresos.requestFocus();
            IV.setSelected(false);
        }
        
    }//GEN-LAST:event_IFActionPerformed
    
    private void jTree2ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree2ValueChanged
        DefaultMutableTreeNode detalle = (DefaultMutableTreeNode)(evt.getPath().getLastPathComponent());
        Object nodeInfo = detalle.getUserObject();
        String kulo = nodeInfo.toString();
        System.out.println("Cadena = "+kulo);
        try {
            if(kulo == "Ingresos") {
                if(tipoIngreso == "variable") {
                    if(per3 == true) {
                        JOptionPane.showMessageDialog(null, "Esta cuenta ya ha sido ratificada","Advertencia", JOptionPane.ERROR_MESSAGE);
                    } else {
                        String n = JOptionPane.showInputDialog(null,"Nombre de la Cuenta","Detalle de Cuentas de Ingresos",JOptionPane.QUESTION_MESSAGE);
                        NuevoHijo = n;
                        if(NuevoHijo == null){
                            JOptionPane.showMessageDialog(null, "Digite datos permisibles","Error de Lectura de Datos", JOptionPane.ERROR_MESSAGE);
                        } else {
                            AgregarIngreso();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Recuerda que ya definistes anteriormente\nque tus ingresos serian fijos\npara toda la vida útil de tu inversión","Adevertencia del Sistema", JOptionPane.WARNING_MESSAGE);
                }
            }
            if(kulo == "Costos") {
                if(tipoCosto == "variable") {
                    if(per2 == true) {
                        JOptionPane.showMessageDialog(null, "Esta cuenta ya ha sido ratificada","Advertencia", JOptionPane.ERROR_MESSAGE);
                    } else {
                        String n = JOptionPane.showInputDialog(null,"Nombre de la Cuenta","Detalle de Cuentas de Costos",JOptionPane.QUESTION_MESSAGE);
                        NuevoHijo = n;
                        if(NuevoHijo == null) {
                            JOptionPane.showMessageDialog(null, "Digite datos permisibles","Error de Lectura de Datos", JOptionPane.ERROR_MESSAGE);
                        } else {
                            AgregarCosto();
                            
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Recuerda que ya definistes anteriormente\nque tus Costos serian fijos\npara toda la vida útil de tu inversión","Adevertencia del Sistema", JOptionPane.WARNING_MESSAGE);
                }
            }
            if(kulo == "Gastos Operativos") {
                if(tipoGasto == "variable") {
                    if(per1 == true) {
                        JOptionPane.showMessageDialog(null, "Esta cuenta ya ha sido ratificada","Advertencia", JOptionPane.ERROR_MESSAGE);
                    } else {
                        String n = JOptionPane.showInputDialog(null,"Nombre de la Cuenta","Detalle de Cuentas de Gastos Operativos",JOptionPane.QUESTION_MESSAGE);
                        NuevoHijo = n;
                        if(NuevoHijo == null) {
                            JOptionPane.showMessageDialog(null, "Digite datos permisibles","Error de Lectura de Datos", JOptionPane.ERROR_MESSAGE);
                        } else {
                            AgregarGoperativo();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Recuerda que ya definistes anteriormente\nque tus Gastos serian fijos\npara toda la vida útil de tu inversión","Adevertencia del Sistema", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch(Exception erore){}
        
    }//GEN-LAST:event_jTree2ValueChanged
    public void AgregarIngreso(){
        addObject(NuevoHijo);
        Vector New = new Vector();
        
        New.add(NuevoHijo);
        modeloingreso.addRow(New);
        tab_ingresos.setEditingRow(sufijo);
        sufijo++;
        
        
    }
    public void AgregarCosto(){
        addObject(NuevoHijo);
        Vector New = new Vector();
        //DefaultTableModel modelo4 =  (DefaultTableModel)tab_costos.getModel();
        New.add(NuevoHijo);
        modelocosto.addRow(New);
        tab_costos.setEditingRow(sufijoc);
        sufijoc++;
    }
    public void AgregarGoperativo(){
        addObject(NuevoHijo);
        Vector New = new Vector();
        New.add(NuevoHijo);
        modelogasto.addRow(New);
        tab_gastos.setEditingRow(sufijog);
        sufijog++;
    }
    //imprimir tablas.
    private void imp_estadonfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_estadonfActionPerformed
// TODO add your handling code here:
        imprimir=7;
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintObject());
        job.printDialog();
        if (job.printDialog()) {
            try { job.print(); } catch (PrinterException excep) { System.out.println(excep); }
        }
    }//GEN-LAST:event_imp_estadonfActionPerformed
    
    private void imp_estadofActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_estadofActionPerformed
// TODO add your handling code here:
        imprimir=6;
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintObject());
        job.printDialog();
        if (job.printDialog()) {
            try { job.print(); } catch (PrinterException excep) { System.out.println(excep); }
        }
    }//GEN-LAST:event_imp_estadofActionPerformed
    
    private void imp_detallecostosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_detallecostosActionPerformed
// TODO add your handling code here:
        imprimir=4;
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintObject());
        job.printDialog();
        if (job.printDialog()) {
            try { job.print(); } catch (PrinterException excep) { System.out.println(excep); }
        }
    }//GEN-LAST:event_imp_detallecostosActionPerformed
    
    private void imp_detalleingresosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_detalleingresosActionPerformed
// TODO add your handling code here:
        imprimir=3;
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintObject());
        job.printDialog();
        if (job.printDialog()) {
            try { job.print(); } catch (PrinterException excep) { System.out.println(excep); }
        }
    }//GEN-LAST:event_imp_detalleingresosActionPerformed
    
    private void imp_calendarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_calendarioActionPerformed
// TODO add your handling code here:
        imprimir=2;
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintObject());
        job.printDialog();
        if (job.printDialog()) {
            try { job.print(); } catch (PrinterException excep) { System.out.println(excep); }
        }
    }//GEN-LAST:event_imp_calendarioActionPerformed
    
    private void imp_depreciacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imp_depreciacionActionPerformed
// TODO add your handling code here:
        imprimir=1;
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintObject());
        job.printDialog();
        if (job.printDialog()) {
            try { job.print(); } catch (PrinterException excep) { System.out.println(excep); }
        }
    }//GEN-LAST:event_imp_depreciacionActionPerformed
    
   
    
    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
// TODO add your handling code here:
        hide();
        dispose();
    }//GEN-LAST:event_SalirActionPerformed
    class depre implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if(jc_depreciacion.getSelectedIndex() == 0) {
                depreciacion = null;
                jc_depreciacion.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "Elija una opción valida","Información del Sistema", JOptionPane.ERROR_MESSAGE);
            } else {
                _depreciacion = jc_depreciacion.getSelectedIndex();
                JComboBox j_depreciacion = (JComboBox)e.getSource();
                String nueva = (String)jc_depreciacion.getSelectedItem();
                depreciacion = nueva;
                System.out.println("Depreciacion "+depreciacion);
                jc_depreciacion.setBackground(Color.black);
            }
        }
    }
    class Metodo implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if(jc_mcalculo.getSelectedIndex() == 0) {
                mcalculo = null;
                jc_mcalculo.setBackground(Color.red);
                
                JOptionPane.showMessageDialog(null, "Elija una opción valida","Información del Sistema", JOptionPane.ERROR_MESSAGE);
            } else {
                _mcalculo = jc_mcalculo.getSelectedIndex();
                if(jc_mcalculo.getSelectedIndex() == 1) {
                    t_añoc.setVisible(true);
                    l_añoc.setVisible(true);
                } else {
                    t_añoc.setVisible(false);
                    l_añoc.setVisible(false);
                }
                
                JComboBox jc_mcalculo= (JComboBox)e.getSource();
                String nueva = (String)jc_mcalculo.getSelectedItem();
                mcalculo = nueva;
                System.out.println("Depreciacion "+mcalculo);
                jc_mcalculo.setBackground(Color.black);
            }
        }
    }
    class Boton1 implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if(_mcalculo == 1) {    // cuando el usuario elije pago unico
                try {
                    t_añoc.setVisible(true);
                    l_añoc.setVisible(true);
                    t_interes.setBackground(Color.black);
                    t_ir.setBackground(Color.black);
                    t_tmar.setBackground(Color.black);
                    t_monto.setBackground(Color.black);
                    t_vsalvamento.setBackground(Color.black);
                    jc_depreciacion.setBackground(Color.black);
                    t_empresa.setBackground(Color.black);
                    jc_mcalculo.setBackground(Color.black);
                    t_mfinanciamiento.setBackground(Color.black);
                    t_vutil.setBackground(Color.black);
                    if(tipoIngreso == "fijo") {
                        txtingresos.setBackground(Color.black);
                        IngresosF = Float.parseFloat(txtingresos.getText());
                    }
                    if(tipoCosto == "fijo") {
                        txtcostos.setBackground(Color.black);
                        CostosF = Float.parseFloat(txtcostos.getText());
                    }
                    if(tipoGasto == "fijo") {
                        txtgastos.setBackground(Color.black);
                        GastosF = Float.parseFloat(txtgastos.getText());
                    }
                    empresa = t_empresa.getText();
                    tmar = Float.parseFloat(t_tmar.getText());
                    ir = Float.parseFloat(t_ir.getText());
                    inversion = Float.parseFloat(t_monto.getText());
                    vutil = Float.parseFloat(t_vutil.getText());
                    v = Integer.parseInt(t_vutil.getText());
                    vsalvamento = Float.parseFloat(t_vsalvamento.getText());
                    financiamiento = Float.parseFloat(t_mfinanciamiento.getText());
                    interes = Float.parseFloat(t_interes.getText());
                    plazo = Float.parseFloat(t_plazo.getText());
                    añoc = Integer.parseInt(String.valueOf(t_añoc.getText()));
                    
                    if(Verificar1() == true) {
                        JOptionPane.showMessageDialog(null,"Complete Corectamente la hoja de Requerimientos","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                        
                        if(tipoIngreso == "fijo") {
                            if(IngresosF <= 0){
                                JOptionPane.showMessageDialog(null,"Los Ingresos no pueden ser menores o iguales a cero","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                                txtingresos.requestFocus();
                                txtingresos.setBackground(Color.red);
                            }
                        }
                        if(tipoCosto == "fijo"){
                            if(CostosF < 0){
                                JOptionPane.showMessageDialog(null,"Los Costos no pueden ser menores o iguales a cero","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                                txtcostos.requestFocus();
                                txtcostos.setBackground(Color.red);
                            }
                        }
                        if(tipoGasto == "fijo"){
                            if(GastosF < 0){
                                JOptionPane.showMessageDialog(null,"Los Gastos Operativos no pueden ser menores o iguales a cero","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                                txtgastos.requestFocus();
                                txtgastos.setBackground(Color.red);
                            }
                        }
                        if(añoc <=0 ) { //año de pago incorrecto
                            t_añoc.requestFocus();
                            t_añoc.setBackground(Color.red);
                            JOptionPane.showMessageDialog(null,"Año de pago del Financiamiento no puede ser menor o igual a cero","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                        }
                        if(inversion> financiamiento) { //año de pago incorrecto
                            t_monto.requestFocus();
                            t_mfinanciamiento.setBackground(Color.red);
                            t_monto.setBackground(Color.red);
                            JOptionPane.showMessageDialog(null,"El financiamiento no puede ser mayor que la Inversión","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                        }
                        if(añoc > plazo)    //año de pago fuera de logica
                        {
                            JOptionPane.showMessageDialog(null,"El año de pago único no puede ser mayor que el plazo de la Inversión","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                            t_añoc.requestFocus();
                            t_añoc.setBackground(Color.red);
                            t_plazo.requestFocus();
                            t_plazo.setBackground(Color.red);
                        }
                        if(mcalculo == null) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            jc_mcalculo.requestFocus();
                            jc_mcalculo.setBackground(Color.red);
                        }
                        if(plazo > vutil){
                            JOptionPane.showMessageDialog(null,"PLAZO NO PUEDE SER MAYOR QUE LA VIDA UTIL","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_plazo.requestFocus();
                            t_plazo.setBackground(Color.red);
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if(plazo <= 0 ){
                            JOptionPane.showMessageDialog(null,"El plazo no puede ser negativo ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_plazo.requestFocus();
                            t_plazo.setBackground(Color.red);
                        }
                        if(vutil >= 20 ){
                            JOptionPane.showMessageDialog(null,"La vida útil de la inversión no debe sobrepasar los 20 años ","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if(interes >=100 ){
                            JOptionPane.showMessageDialog(null,"El interes no puede ser negativo ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_interes.requestFocus();
                            t_interes.setBackground(Color.red);
                        }
                        if(financiamiento <=0 ){
                            JOptionPane.showMessageDialog(null,"El monto definanciamiento no puede ser negativo ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_mfinanciamiento.requestFocus();
                            t_mfinanciamiento.setBackground(Color.red);
                        }
                        if(vutil <= 0 ){
                            JOptionPane.showMessageDialog(null,"La vida util no puede ser negativa ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if(tmar<=0 ){
                            JOptionPane.showMessageDialog(null,"El TMAR no puede ser negativo ni '0',\nDado que es un porcentaje no puede\nser mayor que  100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_tmar.requestFocus();
                            t_tmar.setBackground(Color.red);
                        }
                        if(ir <= 0){
                            JOptionPane.showMessageDialog(null,"El IR no puede ser negativo ni '0',\nDado que es un porcentaje no puede\nser mayor que  100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_ir.requestFocus();
                            t_ir.setBackground(Color.red);
                        }
                        if(tmar >= 100 ){
                            JOptionPane.showMessageDialog(null,"El TMAR no puede ser mayor que 100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_tmar.requestFocus();
                            t_tmar.setBackground(Color.red);
                        }
                        if(ir >= 100){
                            JOptionPane.showMessageDialog(null,"El IR no puede ser mayor que 100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_ir.requestFocus();
                            t_ir.setBackground(Color.red);
                        }
                        if(inversion <= 0){
                            JOptionPane.showMessageDialog(null,"El monto de la inverison no puede ser '0' ni negativa","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_monto.requestFocus();
                            t_monto.setBackground(Color.red);
                        }
                        if(depreciacion == null) {
                            jc_depreciacion.requestFocus();
                            jc_depreciacion.setBackground(Color.red);
                        }
                        if((t_empresa.getText()).length() == 0) {
                            t_empresa.requestFocus();
                            t_empresa.setBackground(Color.red);
                        }
                        if((t_monto.getText()).length() == 0) {
                            t_monto.requestFocus();
                            t_monto.setBackground(Color.red);
                        }
                        if((t_mfinanciamiento.getText()).length() == 0) {
                            t_mfinanciamiento.requestFocus();
                            t_mfinanciamiento.setBackground(Color.red);
                        }
                        if((t_vutil.getText()).length() == 0 ) {
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if((t_tmar.getText()).length() == 0) {
                            t_tmar.requestFocus();
                            t_tmar.setBackground(Color.red);
                        }
                        if((t_vsalvamento.getText()).length() == 0) {
                            t_vsalvamento.requestFocus();
                            t_vsalvamento.setBackground(Color.red);
                        }
                        if((t_ir.getText()).length() == 0) {
                            t_ir.requestFocus();
                            t_ir.setBackground(Color.red);
                        }
                        if((t_interes.getText()).length() == 0){
                            t_interes.requestFocus();
                            t_interes.setBackground(Color.red);
                        }
                        if((t_plazo.getText()).length() == 0){
                            t_plazo.requestFocus();
                            t_plazo.setBackground(Color.red);
                        }
                    } else {
                        t_plazo.setBackground(Color.black);
                        t_interes.setBackground(Color.black);
                        t_ir.setBackground(Color.black);
                        t_tmar.setBackground(Color.black);
                        t_monto.setBackground(Color.black);
                        t_vsalvamento.setBackground(Color.black);
                        jc_depreciacion.setBackground(Color.black);
                        t_empresa.setBackground(Color.black);
                        jc_mcalculo.setBackground(Color.black);
                        t_mfinanciamiento.setBackground(Color.black);
                        t_vutil.setBackground(Color.black);
                        empresa = t_empresa.getText();
                        inversion = Float.parseFloat(t_monto.getText());
                        vutil = Float.parseFloat(t_vutil.getText());
                        v = Integer.parseInt(t_vutil.getText());
                        vsalvamento = Float.parseFloat(t_vsalvamento.getText());
                        financiamiento = Float.parseFloat(t_mfinanciamiento.getText());
                        interes = Float.parseFloat(t_interes.getText());
                        plazo = Float.parseFloat(t_plazo.getText());
                        añoc = Integer.parseInt(String.valueOf(t_añoc.getText()));
                        if(tipoIngreso == "fijo"){
                            txtingresos.setBackground(Color.black);
                            SubTotalIngresos.setEnabled(false);
                            IngresosF = Float.parseFloat(txtingresos.getText());
                        }
                        if(tipoCosto == "fijo") {
                            txtcostos.setBackground(Color.black);
                            SubTotalCostos.setEnabled(false);
                            CostosF = Float.parseFloat(txtcostos.getText());
                        }
                        if(tipoGasto == "fijo") {
                            txtgastos.setBackground(Color.black);
                            SubTotalGastos.setEnabled(false);
                            GastosF = Float.parseFloat(txtgastos.getText());
                        }
                        
                        int result = JOptionPane.showConfirmDialog((Component) null, "¿Está seguro de sus Requerimientos del préstamo?","Confirmación de Requerimientos",JOptionPane.YES_NO_OPTION);
                        
                        if(result == JOptionPane.YES_OPTION) {
                            CalcularDepreciacion();
                            CalcularPrestamo();
                            if(tipoIngreso == "fijo"){
                                txtingresos.setEnabled(false);
                            }
                            if(tipoCosto == "fijo"){
                                txtcostos.setEnabled(false);
                            }
                            if(tipoGasto == "fijo"){
                                txtgastos.setEnabled(false);
                            }
                            IF.setEnabled(false);
                            IV.setEnabled(false);
                            CF.setEnabled(false);
                            CV.setEnabled(false);
                            GF .setEnabled(false);
                            GV .setEnabled(false);
                            jButton1.setEnabled(false);
                            t_plazo.setEnabled(false);
                            t_interes.setEnabled(false);
                            t_ir.setEnabled(false);
                            t_tmar.setEnabled(false);
                            t_monto.setEnabled(false);
                            t_vsalvamento.setEnabled(false);
                            jc_depreciacion.setEnabled(false);
                            t_empresa.setEnabled(false);
                            jc_mcalculo.setEnabled(false);
                            t_mfinanciamiento.setEnabled(false);
                            t_vutil.setEnabled(false);
                            t_añoc.setEnabled(false);
                            hilo = new Carga();
                            hilo.start();
                            ValidacionAmbi1();
                        } else {
                            JOptionPane.showMessageDialog(null,"Proceda cuando este listo.","Informacion del Sistema",JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }//fin del try
                catch(Exception errore) {
                    JOptionPane.showMessageDialog(null,"Error de Lectura del Formulario","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                }
            }//fin del if
            else {  //cualquier otro que no sea pago unico
                try {
                    t_añoc.setVisible(false);
                    l_añoc.setVisible(false);
                    empresa = t_empresa.getText();
                    inversion = Float.parseFloat(t_monto.getText());
                    vutil = Float.parseFloat(t_vutil.getText());
                    v = Integer.parseInt(t_vutil.getText());
                    vsalvamento = Float.parseFloat(t_vsalvamento.getText());
                    financiamiento = Float.parseFloat(t_mfinanciamiento.getText());
                    interes = Float.parseFloat(t_interes.getText());
                    plazo = Float.parseFloat(t_plazo.getText());
                    tmar = Float.parseFloat(t_tmar.getText());
                    ir = Float.parseFloat(t_ir.getText());
                    if(tipoIngreso == "fijo") {
                        txtingresos.setBackground(Color.black);
                        IngresosF = Float.parseFloat(txtingresos.getText());
                    }
                    if(tipoCosto == "fijo") {
                        txtcostos.setBackground(Color.black);
                        CostosF = Float.parseFloat(txtcostos.getText());
                    }
                    if(tipoGasto == "fijo") {
                        txtgastos.setBackground(Color.black);
                        GastosF = Float.parseFloat(txtgastos.getText());
                    }
                    
                    if(Verificar2() == true) {
                        JOptionPane.showMessageDialog(null,"Complete Corectamente la hoja de Requerimientos","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                        
                        if(tipoIngreso == "fijo") {
                            if(IngresosF <= 0){
                                JOptionPane.showMessageDialog(null,"Los Ingresos no pueden ser menores o iguales a cero","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                                txtingresos.requestFocus();
                                txtingresos.setBackground(Color.red);
                            }
                        }
                        if(tipoCosto == "fijo"){
                            if(CostosF < 0){
                                JOptionPane.showMessageDialog(null,"Los Costos no pueden ser menores o iguales a cero","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                                txtcostos.requestFocus();
                                txtcostos.setBackground(Color.red);
                            }
                        }
                        if(tipoGasto == "fijo"){
                            if(GastosF < 0){
                                JOptionPane.showMessageDialog(null,"Los Gastos Operativos no pueden ser menores o iguales a cero","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                                txtgastos.requestFocus();
                                txtgastos.setBackground(Color.red);
                            }
                        }
                        if(inversion> financiamiento) { //año de pago incorrecto
                            t_monto.requestFocus();
                            t_mfinanciamiento.setBackground(Color.red);
                            t_monto.setBackground(Color.red);
                            JOptionPane.showMessageDialog(null,"El financiamiento no puede ser mayor que la Inversión","Error de Lectura",JOptionPane.ERROR_MESSAGE);
                        }
                        if(mcalculo == null) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            jc_mcalculo.requestFocus();
                            jc_mcalculo.setBackground(Color.red);
                        }
                        if(vutil >= 20 ){
                            JOptionPane.showMessageDialog(null,"La vida útil de la inversión no debe sobrepasar los 20 años ","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if(plazo > vutil){
                            JOptionPane.showMessageDialog(null,"PLAZO NO PUEDE SER MAY QUE LA VIDA UTIL","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_plazo.requestFocus();
                            t_plazo.setBackground(Color.red);
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if(plazo <= 0 ){
                            JOptionPane.showMessageDialog(null,"El plazo no puede ser negativo ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_plazo.requestFocus();
                            t_plazo.setBackground(Color.red);
                        }
                        if(interes >=100 ){
                            JOptionPane.showMessageDialog(null,"El interes no puede ser negativo ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_interes.requestFocus();
                            t_interes.setBackground(Color.red);
                        }
                        if(financiamiento <=0 ){
                            JOptionPane.showMessageDialog(null,"El monto definanciamiento no puede ser negativo ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_mfinanciamiento.requestFocus();
                            t_mfinanciamiento.setBackground(Color.red);
                        }
                        if(vutil <= 0 ){
                            JOptionPane.showMessageDialog(null,"La vida útil no puede ser negativa ni '0'","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if(tmar<=0 ){
                            JOptionPane.showMessageDialog(null,"El TMAR no puede ser negativo ni '0',\nDado que es un porcentaje no puede\nser mayor que  100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_tmar.requestFocus();
                            t_tmar.setBackground(Color.red);
                        }
                        if(ir <= 0){
                            JOptionPane.showMessageDialog(null,"El IR no puede ser negativo ni '0',\nDado que es un porcentaje no puede\nser mayor que  100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_ir.requestFocus();
                            t_ir.setBackground(Color.red);
                        }
                        if(tmar >= 100 ){
                            JOptionPane.showMessageDialog(null,"El TMAR no puede ser mayor que 100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_tmar.requestFocus();
                            t_tmar.setBackground(Color.red);
                        }
                        if(ir >= 100){
                            JOptionPane.showMessageDialog(null,"El IR no puede ser mayor que 100","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_ir.requestFocus();
                            t_ir.setBackground(Color.red);
                        }
                        if(inversion <= 0){
                            JOptionPane.showMessageDialog(null,"El monto de la inverison no puede ser '0' ni negativa","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_monto.requestFocus();
                            t_monto.setBackground(Color.red);
                        }
                        if(depreciacion == null) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            jc_depreciacion.requestFocus();
                            jc_depreciacion.setBackground(Color.red);
                        }
                        if((t_empresa.getText()).length() == 0) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_empresa.requestFocus();
                            t_empresa.setBackground(Color.red);
                        }
                        if((t_monto.getText()).length() == 0) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_monto.requestFocus();
                            t_monto.setBackground(Color.red);
                        }
                        if((t_mfinanciamiento.getText()).length() == 0) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_mfinanciamiento.requestFocus();
                            t_mfinanciamiento.setBackground(Color.red);
                        }
                        if((t_vutil.getText()).length() == 0 ) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_vutil.requestFocus();
                            t_vutil.setBackground(Color.red);
                        }
                        if((t_tmar.getText()).length() == 0) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_tmar.requestFocus();
                            t_tmar.setBackground(Color.red);
                        }
                        if((t_vsalvamento.getText()).length() == 0) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_vsalvamento.requestFocus();
                            t_vsalvamento.setBackground(Color.red);
                        }
                        if((t_ir.getText()).length() == 0) {
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_ir.requestFocus();
                            t_ir.setBackground(Color.red);
                        }
                        if((t_interes.getText()).length() == 0){
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_interes.requestFocus();
                            t_interes.setBackground(Color.red);
                        }
                        if((t_plazo.getText()).length() == 0){
                            JOptionPane.showMessageDialog(null,"CADENA VACIA","Error de Lectura",JOptionPane.WARNING_MESSAGE);
                            t_plazo.requestFocus();
                            t_plazo.setBackground(Color.red);
                        }
                    } else {
                        t_plazo.setBackground(Color.black);
                        t_interes.setBackground(Color.black);
                        t_ir.setBackground(Color.black);
                        t_tmar.setBackground(Color.black);
                        t_monto.setBackground(Color.black);
                        t_vsalvamento.setBackground(Color.black);
                        jc_depreciacion.setBackground(Color.black);
                        t_empresa.setBackground(Color.black);
                        jc_mcalculo.setBackground(Color.black);
                        t_mfinanciamiento.setBackground(Color.black);
                        t_vutil.setBackground(Color.black);
                        
                        empresa = t_empresa.getText();
                        inversion = Float.parseFloat(t_monto.getText());
                        vutil = Float.parseFloat(t_vutil.getText());
                        v = Integer.parseInt(t_vutil.getText());
                        vsalvamento = Float.parseFloat(t_vsalvamento.getText());
                        financiamiento = Float.parseFloat(t_mfinanciamiento.getText());
                        interes = Float.parseFloat(t_interes.getText());
                        plazo = Float.parseFloat(t_plazo.getText());
                        tmar = Float.parseFloat(t_tmar.getText());
                        ir = Float.parseFloat(t_ir.getText());
                        if(tipoIngreso == "fijo"){
                            txtingresos.setBackground(Color.black);
                            IngresosF = Float.parseFloat(txtingresos.getText());
                        }
                        if(tipoCosto == "fijo") {
                            txtcostos.setBackground(Color.black);
                            CostosF = Float.parseFloat(txtcostos.getText());
                        }
                        if(tipoGasto == "fijo") {
                            txtgastos.setBackground(Color.black);
                            GastosF = Float.parseFloat(txtgastos.getText());
                        }
                        int result = JOptionPane.showConfirmDialog((Component) null, "¿Está seguro de sus Requerimientos?","Confirmación de Requerimientos",JOptionPane.YES_NO_OPTION);
                        if(result == JOptionPane.YES_OPTION) {
                            CalcularDepreciacion();
                            CalcularPrestamo();
                            if(tipoIngreso == "fijo"){
                                txtingresos.setEnabled(false);
                            }
                            if(tipoCosto == "fijo"){
                                txtcostos.setEnabled(false);
                            }
                            if(tipoGasto == "fijo"){
                                txtgastos.setEnabled(false);
                            }
                            IF.setEnabled(false);
                            IV.setEnabled(false);
                            CF.setEnabled(false);
                            CV.setEnabled(false);
                            GF.setEnabled(false);
                            GV.setEnabled(false);
                            jButton1.setEnabled(false);
                            t_plazo.setEnabled(false);
                            t_interes.setEnabled(false);
                            t_ir.setEnabled(false);
                            t_tmar.setEnabled(false);
                            t_monto.setEnabled(false);
                            t_vsalvamento.setEnabled(false);
                            jc_depreciacion.setEnabled(false);
                            t_empresa.setEnabled(false);
                            jc_mcalculo.setEnabled(false);
                            t_mfinanciamiento.setEnabled(false);
                            t_vutil.setEnabled(false);
                            hilo = new Carga();
                            hilo.start();
                            ValidacionAmbi1();
                        } else {
                            JOptionPane.showMessageDialog(null,"Proceda cuando este listo.","Informacion del Sistema",JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }//fin del try
                catch(Exception errore) {
                    System.out.println("Error en la lectura: "+errore);
                    JOptionPane.showMessageDialog(null,"Recuerde introducir valores reales para mayor presición","Advertencia del Sistema",JOptionPane.WARNING_MESSAGE);
                }
            }
        }//fin de metodo
    }//fin de clase
    public void CalcularDepreciacion() {
        int sda = 0;
        int fr = 1;
        double suma = 0;
        double suma1 = 0;
        
        if(_depreciacion == 1)//linea recta
        {
            vlibros[0] = inversion;
            
            for(int i = 1; i <= vutil; i++) {
                vdepreciacion[i] = (vlibros[0] - vsalvamento)/vutil;
                vlibros[i] = vlibros[ i - 1 ] - vdepreciacion[i];
            }
            for(int i = 0; i <= vutil; i++) {
                R = new Vector();
                modelo1 =  (DefaultTableModel)tab_depreciacion.getModel();
                R.add(i);
                R.add(round(vdepreciacion[i]));
                R.add(round(vlibros[i]));
                modelo1.addRow(R);
            }
            for(int i= 1;i <vutil;i++) {
                modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
                modelocosto = (DefaultTableModel)tab_costos.getModel();
                modelogasto = (DefaultTableModel)tab_gastos.getModel();
                modelotabla1 = (DefaultTableModel)tabla1.getModel();
                modelotabla2 = (DefaultTableModel)tabla2.getModel();
                modeloingreso.addColumn("Año "+ (i+1));
                modelocosto.addColumn("Año "+ (i+1));
                modelogasto.addColumn("Año "+ (i+1));
                modelotabla1.addColumn("Año "+ (i+1));
                modelotabla2.addColumn("Año "+ (i+1));
            }
            ContruirEstados();
        }
        if(_depreciacion == 2)//sda incremental
        {
            vlibros[0] = inversion;
            for(int j = 1; j <= vutil;j++) {
                suma += j;
            }
            for(int j = 1;j <= vutil;j++) {
                vdepreciacion[j] = (j/suma)*(vlibros[0] - vsalvamento);
                vlibros[j] = vlibros[j - 1] - vdepreciacion[j];
            }
            for(int j = 0;j <= vutil;j++) {
                R = new Vector();
                modelo1 =  (DefaultTableModel)tab_depreciacion.getModel();
                R.add(j);
                R.add(round(vdepreciacion[j]));
                R.add(round(vlibros[j]));
                modelo1.addRow(R);
            }
            for(int i= 1;i <vutil;i++) {
                modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
                modelocosto = (DefaultTableModel)tab_costos.getModel();
                modelogasto = (DefaultTableModel)tab_gastos.getModel();
                modelotabla1 = (DefaultTableModel)tabla1.getModel();
                modelotabla2 = (DefaultTableModel)tabla2.getModel();
                modeloingreso.addColumn("Año "+ (i+1));
                modelocosto.addColumn("Año "+ (i+1));
                modelogasto.addColumn("Año "+ (i+1));
                modelotabla1.addColumn("Año "+ (i+1));
                modelotabla2.addColumn("Año "+ (i+1));
            }
            ContruirEstados();
        }
        if(_depreciacion == 3)//sda decremental
        {
            vlibros[0] = inversion;
            suma1 = vutil;
            for(int k = 1; k <= vutil;k++) {
                suma += k;
            }
            for(int k = 1;k <= vutil;k++) {
                vdepreciacion[k] = (suma1/suma)*(vlibros[0] - vsalvamento);
                vlibros[k] = vlibros[ k - 1 ] - vdepreciacion[k];
                suma1 -=1 ;
            }
            for(int k = 0;k <= vutil;k++) {
                R = new Vector();
                modelo1 =  (DefaultTableModel)tab_depreciacion.getModel();
                R.add(k);
                R.add(round(vdepreciacion[k]));
                R.add(round(vlibros[k]));
                modelo1.addRow(R);
            }
            
            for(int i= 1;i < vutil;i++) {
                modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
                modelocosto = (DefaultTableModel)tab_costos.getModel();
                modelogasto = (DefaultTableModel)tab_gastos.getModel();
                modelotabla1 = (DefaultTableModel)tabla1.getModel();
                modelotabla2 = (DefaultTableModel)tabla2.getModel();
                modeloingreso.addColumn("Año "+ (i+1));
                modelocosto.addColumn("Año "+ (i+1));
                modelogasto.addColumn("Año "+ (i+1));
                modelotabla1.addColumn("Año "+ (i+1));
                modelotabla2.addColumn("Año "+ (i+1));
            }
            ContruirEstados();
        }
    }
    public void CalcularPrestamo() {
        double num_pagos = plazo;
        double I = interes;
        I = I/100;
        
        if(_mcalculo == 1) {
            double b = 0;
            
            inte = (financiamiento * Math.pow((1+I), num_pagos)) - financiamiento;
            pg = financiamiento ;
            Vector mirame = new Vector();
            mirame.add(" ");
            mirame.add(" ");
            mirame.add(" ");
            mirame.add(" ");
            mirame.add(pg);
            C = new Vector();
            modelo4 = (DefaultTableModel)tab_calendario.getModel();
            C.add(añoc);
            C.add(round(inte));
            C.add(pg+inte);
            C.add(financiamiento);
            C.add(b);
            modelo4.addRow(C);
            for(int i = 0; i <= vutil; i++){
                pp[i] = 0;
                Ik[i] = 0;
            }
            
            System.out.println("Imprimiendo valores de pago unico");
            pp[añoc] = pg;
            Ik[añoc] = inte;
            System.out.println("Intereses  "+ pp[añoc]);
            System.out.println("Pago al principal  "+Ik[añoc]);
            System.out.println(" ");
            
        }
        if(_mcalculo == 2) // cuota nivelada
        {
            Sk[0] = financiamiento;
            
            for(int k =1; k <= num_pagos; k++ ) {
                Ck[k] = 1 - Math.pow((1+I),(-num_pagos));
                Ck[k] = Ck[k]/I;
                Ck[k] = (financiamiento / Ck[k]);
                Sk[k] = 1 - Math.pow((1+I),(-num_pagos + k));
                Sk[k] = Sk[k] / I;
                Sk[k] = Sk[k] * Ck[k];
                Ik[k] = 1 - Math.pow((1+I),(k-num_pagos- 1));
                Ik[k] = Ik[k] * Ck[k];
                pp[k] = Ck[k] - Ik[k];
                
                C = new Vector();
                modelo4 =  (DefaultTableModel)tab_calendario.getModel();
                C.add(k);
                C.add(round(Ik[k]));
                C.add(round(Ck[k]));
                C.add(round(pp[k]));
                C.add(round(Sk[k]));
                modelo4.addRow(C);
            }
        }
        if(_mcalculo == 3) // cuota proporcional
        {
            Sk[0] = financiamiento;
            for(int k = 1; k <= num_pagos; k++) {
                pp[k]=financiamiento/num_pagos;
                Ik[k] = Sk[(k-1)]*I;
                Ck[k] = pp[k] + Ik[k];
                Sk[k] = Sk[(k-1)] - pp[k];
                C = new Vector();
                modelo4 =  (DefaultTableModel)tab_calendario.getModel();
                C.add(k);
                C.add(round(Ik[k]));
                C.add(round(Ck[k]));
                C.add(round(pp[k]));
                C.add(round(Sk[k]));
                modelo4.addRow(C);
            }
        }
        if(_mcalculo == 4) // interes flat
        {
            Sk[0] = (financiamiento)*(1 + I*num_pagos);
            for(int k = 1; k <= num_pagos; k++) {
                pp[k] = financiamiento/num_pagos;
                Ik[k] = financiamiento*I;
                Ck[k] = pp[k] + Ik[k];
                Sk[k] = Sk[k - 1] - Ck[k];
                C = new Vector();
                modelo4 =  (DefaultTableModel)tab_calendario.getModel();
                C.add(k);
                C.add(round(Ik[k]));
                C.add(round(Ck[k]));
                C.add(round(pp[k]));
                C.add(Math.abs(round(Sk[k])));
                modelo4.addRow(C);
            }
        }
    }
    public void CrearNodos(DefaultMutableTreeNode m) {
        addObject(null,"Ingresos");
        addObject(null,"Costos");
        addObject(null,"Gastos Operativos");
    }
    /**
     *
     * @Clase VPN calculadora de Valor Presente Neto
     *
     */
    /*public static void main(String[] args)
     {
        VPN asdf = new VPN();
    }*/
    public static Double round(double y) {
        y *= 100;
        y = Math.floor(y);
        
        if(y%10 > 5) {
            y += 1;
            y = Math.floor(y)/100;
        } else {
            y = Math.floor(y)/100;
        }
        
        return y;
    }
    public boolean Verificar1(){
        if(tipoIngreso == "fijo") {
            if(IngresosF <= 0){
                return true;
            }
        }
        if(tipoCosto == "fijo"){
            if(CostosF < 0){
                return true;
            }
        }
        if(tipoGasto == "fijo"){
            if(GastosF < 0){
                return true;
            }
        }
        if(financiamiento > inversion || ir >= 100 || plazo > vutil ||  plazo <= 0 || financiamiento <=0 || ir <= 0 || vutil <= 0 || tmar>=100||tmar<=0 || interes >= 100|| inversion <= 0||añoc <=0 || añoc > plazo || plazo > vutil ||mcalculo==null||depreciacion==null||(t_empresa.getText()).length()==0||(t_monto.getText()).length() ==0||(t_mfinanciamiento.getText()).length()==0||(t_vutil.getText()).length()==0||(t_tmar.getText()).length()==0||(t_vsalvamento.getText()).length()==0 ||(t_ir.getText()).length()==0 ||(t_interes.getText()).length()==0 ||(t_plazo.getText()).length()==0 || (t_añoc.getText()).length() == 0) {
            return true;
        }
        return false;
    }
    public boolean Verificar2(){
        if(tipoIngreso == "fijo") {
            if(IngresosF <= 0){
                return true;
            }
        }
        if(tipoCosto == "fijo"){
            if(CostosF < 0){
                return true;
            }
        }
        if(tipoGasto == "fijo"){
            if(GastosF < 0){
                return true;
            }
        }
        if(financiamiento > inversion || plazo > vutil ||plazo <= 0 || interes >=100 || financiamiento <=0 || vutil <= 0 ||tmar >= 100 ||  tmar <= 0 || ir>=100 || ir <= 0 || inversion <= 0||mcalculo==null||depreciacion==null||(t_empresa.getText()).length()==0||(t_monto.getText()).length() ==0||(t_mfinanciamiento.getText()).length()==0||(t_vutil.getText()).length()==0||(t_tmar.getText()).length()==0||(t_vsalvamento.getText()).length()==0 ||(t_ir.getText()).length()==0 ||(t_interes.getText()).length()==0 ||(t_plazo.getText()).length()==0) {
            return true;
        }
        return false;
    }
    public void ValidacionAmbi1() {
        if(tipoIngreso == "fijo" && tipoCosto == "fijo" && tipoGasto == "fijo") {
            agregar.setEnabled(true);
            agregar.setText("Elaborar E.R.");
            jTree2.setEnabled(false);
            SubTotalIngresos.setEnabled(false);
            SubTotalCostos.setEnabled(false);
            SubTotalGastos.setEnabled(false);
            
            for(int i = 1; i <= vutil; i ++) {
                var_ingresos[i] = IngresosF;
                var_gastos[i] = GastosF;
                var_costos[i] = CostosF;
            }
            System.out.println("detalles fijos");
            
            for(int i = 1; i <= vutil; i ++) {
                System.out.println("ingresos "+i+"  :"+var_ingresos[i]);
                System.out.println("costos "+i+"  :"+var_costos[i]);
                System.out.println("gastos "+i+"  :"+var_gastos[i]);
            }
            Vector total1 = new Vector();
            Vector total2 = new Vector();
            Vector total3 = new Vector();
            
            total1.add("Total");
            total2.add("Total");
            total3.add("Total");
            
            for(int s = 1; s <= vutil; s++) {
                total1.add(var_ingresos[s]);
                total2.add(var_costos[s]);
                total3.add(var_gastos[s]);
            }
            modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
            modelogasto = (DefaultTableModel)tab_gastos.getModel();
            modelocosto = (DefaultTableModel)tab_costos.getModel();
            
            modeloingreso.addRow(total1);
            modelocosto.addRow(total2);
            modelogasto.addRow(total3);
            
            tab_ingresos.setEnabled(false);
            tab_costos.setEnabled(false);
            tab_gastos.setEnabled(false);
            per1 = true;
            per2 = true;
            per3 = true;
            JOptionPane.showMessageDialog(null,"Procedaa a elaborar los Estados de Resultados","Información del Sistema",JOptionPane.INFORMATION_MESSAGE);
            
        } else {
            if(tipoIngreso == "variable" && tipoCosto == "variable" && tipoGasto == "variable")  //revisado
            {
                agregar.setEnabled(false);
                SubTotalIngresos.setEnabled(true);
                SubTotalCostos.setEnabled(true);
                SubTotalGastos.setEnabled(true);
                jTree2.setEnabled(true);
                tab_ingresos.setEnabled(true);
                tab_costos.setEnabled(true);
                tab_gastos.setEnabled(true);
            } else {
                if(tipoIngreso == "fijo" && tipoCosto == "variable" && tipoGasto == "variable") { //revisado
                    agregar.setEnabled(false);
                    SubTotalIngresos.setEnabled(false);
                    SubTotalCostos.setEnabled(true);
                    SubTotalGastos.setEnabled(true);
                    jTree2.setEnabled(true);
                    per3 = true;
                    
                    for(int i = 1; i <= vutil; i ++) {
                        var_ingresos[i] = IngresosF;
                    }
                    Vector total1 = new Vector();
                    total1.add("Total");
                    for(int s = 1; s <= vutil; s++) {
                        total1.add(var_ingresos[s]);
                    }
                    modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
                    modeloingreso.addRow(total1);
                    
                    tab_ingresos.setEnabled(false);
                    tab_costos.setEnabled(true);
                    tab_gastos.setEnabled(true);
                }
                if(tipoIngreso == "fijo" && tipoCosto == "fijo" && tipoGasto == "variable") { //revisado
                    agregar.setEnabled(false);//
                    SubTotalIngresos.setEnabled(false);
                    SubTotalCostos.setEnabled(false);
                    SubTotalGastos.setEnabled(true);
                    jTree2.setEnabled(true);
                    per3 = true;
                    per2 = true;
                    
                    for(int i = 1; i <= vutil; i ++) {
                        var_ingresos[i] = IngresosF;
                        var_costos[i] = CostosF;
                    }
                    Vector total1 = new Vector();
                    total1.add("Total");
                    Vector total2 = new Vector();
                    total2.add("Total");
                    for(int s = 1; s <= vutil; s++) {
                        total1.add(var_ingresos[s]);
                        total2.add(var_costos[s]);
                    }
                    modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
                    modeloingreso.addRow(total1);
                    modelocosto = (DefaultTableModel)tab_costos.getModel();
                    modelocosto.addRow(total2);
                    tab_ingresos.setEnabled(false);
                    tab_costos.setEnabled(false);
                    tab_gastos.setEnabled(true);
                }
                if(tipoIngreso == "variable" && tipoCosto == "fijo" && tipoGasto == "variable") { //revisado
                    agregar.setEnabled(false);
                    SubTotalIngresos.setEnabled(true);
                    SubTotalCostos.setEnabled(false);
                    SubTotalGastos.setEnabled(true);
                    jTree2.setEnabled(true);
                    per2 = true;
                    
                    for(int i = 1; i <= vutil; i ++) {
                        var_costos[i] = CostosF;
                    }
                    Vector total3 = new Vector();
                    total3.add("Total");
                    for(int s = 1; s <= vutil; s++) {
                        total3.add(var_costos[s]);
                    }
                    modelocosto = (DefaultTableModel)tab_costos.getModel();
                    modelocosto.addRow(total3);
                    tab_ingresos.setEnabled(true);
                    tab_costos.setEnabled(false);
                    tab_gastos.setEnabled(true);
                }
                if(tipoIngreso == "variable" && tipoCosto == "variable" && tipoGasto == "fijo") { //revisado
                    agregar.setEnabled(false);
                    SubTotalIngresos.setEnabled(true);
                    SubTotalCostos.setEnabled(true);
                    SubTotalGastos.setEnabled(false);
                    per1=true;
                    jTree2.setEnabled(true);
                    for(int i = 1; i <= vutil; i ++) {
                        var_gastos[i] = GastosF;
                    }
                    Vector total2 = new Vector();
                    total2.add("Total");
                    for(int s = 1; s <= vutil; s++){
                        total2.add(var_gastos[s]);
                    }
                    modelogasto = (DefaultTableModel)tab_gastos.getModel();
                    modelogasto.addRow(total2);
                    tab_ingresos.setEnabled(true);
                    tab_costos.setEnabled(true);
                    tab_gastos.setEnabled(false);
                }
                
                if(tipoIngreso == "variable" && tipoCosto == "fijo" &&  tipoGasto == "fijo") //reisado
                {
                    agregar.setEnabled(false);
                    SubTotalIngresos.setEnabled(true);
                    SubTotalCostos.setEnabled(false);
                    SubTotalGastos.setEnabled(false);
                    per1 = true;
                    per2 = true;
                    
                    jTree2.setEnabled(true);
                    
                    for(int i = 1; i <= vutil; i ++) {
                        var_gastos[i] = GastosF;
                        var_costos[i] = CostosF;
                    }
                    Vector total2 = new Vector();
                    Vector total3 = new Vector();
                    total2.add("Total");
                    total3.add("Total");
                    for(int s = 1; s <= vutil; s++) {
                        total2.add(var_costos[s]);
                        total3.add(var_gastos[s]);
                    }
                    modelogasto = (DefaultTableModel)tab_gastos.getModel();
                    modelocosto = (DefaultTableModel)tab_costos.getModel();
                    modelocosto.addRow(total2);
                    modelogasto.addRow(total3);
                    
                    tab_ingresos.setEnabled(true);
                    tab_costos.setEnabled(false);
                    tab_gastos.setEnabled(false);
                }
                if(tipoIngreso == "fijo" && tipoCosto == "variable" &&  tipoGasto == "fijo") //revisado
                {
                    agregar.setEnabled(false);
                    SubTotalIngresos.setEnabled(false);
                    SubTotalCostos.setEnabled(true);
                    SubTotalGastos.setEnabled(false);
                    per3 = true;
                    per1 = true;
                    jTree2.setEnabled(true);
                    
                    for(int i = 1; i <= vutil; i ++) {
                        var_ingresos[i] = IngresosF;
                        var_gastos[i] = GastosF;
                    }
                    Vector total1 = new Vector();
                    Vector total2 = new Vector();
                    total1.add("Total");
                    total2.add("Total");
                    for(int s = 1; s <= vutil; s++) {
                        total1.add(var_ingresos[s]);
                        total2.add(var_gastos[s]);
                    }
                    modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
                    modelogasto = (DefaultTableModel)tab_gastos.getModel();
                    modeloingreso.addRow(total1);
                    modelogasto.addRow(total2);
                    tab_ingresos.setEnabled(false);
                    tab_costos.setEnabled(true);
                    tab_gastos.setEnabled(false);
                }
                if(tipoIngreso == "fijo" && tipoCosto == "variable" &&  tipoGasto == "variable")  //revisado
                {
                    agregar.setEnabled(false);
                    SubTotalIngresos.setEnabled(false);
                    SubTotalCostos.setEnabled(true);
                    SubTotalGastos.setEnabled(true);
                    per3 = true;
                    jTree2.setEnabled(true);
                    
                    for(int i = 1; i <= vutil; i ++) {
                        var_ingresos[i] = IngresosF;
                    }
                    Vector total1 = new Vector();
                    total1.add("Total");
                    for(int s = 1; s <= vutil; s++) {
                        total1.add(var_ingresos[s]);
                    }
                    modeloingreso = (DefaultTableModel)tab_ingresos.getModel();
                    modeloingreso.addRow(total1);
                    
                    tab_ingresos.setEnabled(false);
                    tab_costos.setEnabled(true);
                    tab_gastos.setEnabled(true);
                }
            }
        }
    }
    class Carga extends Thread {
        public void run() {
            barra.setVisible(true);
            fileo2.setVisible(true);
            foleo.setVisible(true);
            
            fuego.setVisible(true);
            try {
                int min = 0;
                int max = 100;
                int i = min;
                barra.setValue(min);
                barra.setMinimum(min);
                barra.setMaximum(max);
                
                for( i=min; i <= max; i++ ) {
                    barra.setValue( i );
                    try {
                        hilo.sleep(15);
                        if(i%2 == 0) {
                            foleo.setText("Procesando Requerimientos..."+i);
                        }
                        if(i%3 == 0) {
                            foleo.setText("Evaluando... Datos........"+i);
                        }
                        if(i%4 == 0) {
                            foleo.setText("Evaluando Inversión... Fianciamiento..."+i);
                        }
                        if(i%5 == 0) {
                            foleo.setText("Cargando..."+i+"%");
                            
                        }
                        fileo2.setText("Cargando..."+i+" %");
                    } catch(InterruptedException ie){}
                }
                barra.setVisible(false);
                barra.setValue(min);
                fileo2.setVisible(false);
                foleo.setVisible(false);
                fuego.setVisible(false);
                jtabbedpane.setSelectedIndex(2);
                
            } catch(Exception miniu){}
        }
    }
    class Carga2 extends Thread {
        public void run() {
            barra2.setVisible(true);
            A.setVisible(true);
            
            try {
                int min = 0;
                int max = 100;
                int i = min;
                barra2.setValue(min);
                barra2.setMinimum(min);
                barra2.setMaximum(max);
                
                for( i=min; i <= max; i++ ) {
                    barra2.setValue( i );
                    try {
                        hilo.sleep(10);
                        A.setText(" "+i+" %");
                    } catch(InterruptedException ie){}
                }
                A.setText(" 0 %");
                barra2.setValue(0);
                A.setVisible(false);
                barra2.setVisible(false);
                
                
            } catch(Exception miniu){}
        }
        
    }
    class Carga3 extends Thread {
        public void run() {
            barra2.setVisible(true);
            A.setVisible(true);
            
            try {
                int min = 0;
                int max = 100;
                int i = min;
                barra2.setValue(min);
                barra2.setMinimum(min);
                barra2.setMaximum(max);
                
                for( i=min; i <= max; i++ ) {
                    barra2.setValue( i );
                    try {
                        hilo.sleep(10);
                        A.setText(" "+i+" %");
                    } catch(InterruptedException ie){}
                }
                A.setText(" 0 %");
                barra2.setValue(0);
                A.setVisible(false);
                barra2.setVisible(false);
            } catch(Exception miniu){}
            jtabbedpane.setSelectedIndex(3);
        }
    }
    class PrintObject implements Printable {
        public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
            switch(imprimir) {
                case 1: //depreciacion
                {
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setColor(Color.black);
                    int fontHeight=g2.getFontMetrics().getHeight();
                    int fontDesent=g2.getFontMetrics().getDescent();
                    double pageHeight =	pageFormat.getImageableHeight()-fontHeight;
                    double pageWidth = pageFormat.getImageableWidth();
                    double tableWidth = (double)tab_depreciacion.getColumnModel().getTotalColumnWidth();
                    double scale = 1;
                    
                    if (tableWidth >= pageWidth) {
                        scale = pageWidth / tableWidth;
                    }
                    
                    double headerHeightOnPage=tab_depreciacion.getTableHeader().getHeight()*scale;
                    double tableWidthOnPage=tableWidth*scale;
                    double oneRowHeight=(tab_depreciacion.getRowHeight()+tab_depreciacion.getRowMargin())*scale;
                    int numRowsOnAPage=(int)((pageHeight-headerHeightOnPage)/oneRowHeight);
                    double pageHeightForTable=oneRowHeight*	numRowsOnAPage;
                    int totalNumPages= (int)Math.ceil(((double)tab_depreciacion.getRowCount())/numRowsOnAPage);
                    
                    if(pageIndex>=totalNumPages) {
                        return NO_SUCH_PAGE;
                    }
                    
                    g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
                    //loque esta borrado es para enumerar las paginas
                    /*g2.drawString("Página: "+(pageIndex+1),
                    (int)pageWidth/2-35, (int)(pageHeight
                    +fontHeight-fontDesent));*/
                    
                    g2.translate(0f,headerHeightOnPage);
                    g2.translate(0f,-pageIndex*pageHeightForTable);
                    
                    if (pageIndex + 1 == totalNumPages) {
                        int lastRowPrinted = 	numRowsOnAPage * pageIndex;
                        int numRowsLeft = tab_depreciacion.getRowCount() - lastRowPrinted;
                        g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int) Math.ceil(tableWidthOnPage),(int) Math.ceil(oneRowHeight * numRowsLeft));
                    } else {
                        g2.setClip(0,(int)(pageHeightForTable*pageIndex),(int) Math.ceil(tableWidthOnPage),	(int) Math.ceil(pageHeightForTable));
                    }
                    
                    g2.scale(scale,scale);
                    tab_depreciacion.paint(g2);
                    g2.scale(1/scale,1/scale);
                    g2.translate(0f,pageIndex*pageHeightForTable);
                    g2.translate(0f, -headerHeightOnPage);
                    g2.setClip(0, 0,(int) Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage));
                    g2.scale(scale,scale);
                    tab_depreciacion.getTableHeader().paint(g2);
                    
                    break;
                }
                case 2: //calendario de pago
                {
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setColor(Color.black);
                    int fontHeight=g2.getFontMetrics().getHeight();
                    int fontDesent=g2.getFontMetrics().getDescent();
                    double pageHeight =	pageFormat.getImageableHeight()-fontHeight;
                    double pageWidth = pageFormat.getImageableWidth();
                    double tableWidth = (double)tab_calendario.getColumnModel().getTotalColumnWidth();
                    double scale = 1;
                    
                    if (tableWidth >= pageWidth) {
                        scale = pageWidth / tableWidth;
                    }
                    
                    double headerHeightOnPage=tab_calendario.getTableHeader().getHeight()*scale;
                    double tableWidthOnPage=tableWidth*scale;
                    double oneRowHeight=(tab_calendario.getRowHeight()+tab_calendario.getRowMargin())*scale;
                    int numRowsOnAPage=(int)((pageHeight-headerHeightOnPage)/oneRowHeight);
                    double pageHeightForTable=oneRowHeight*	numRowsOnAPage;
                    int totalNumPages= (int)Math.ceil(((double)tab_calendario.getRowCount())/numRowsOnAPage);
                    
                    if(pageIndex>=totalNumPages) {
                        return NO_SUCH_PAGE;
                    }
                    
                    g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
                    //loque esta borrado es para enumerar las paginas
                    /*g2.drawString("Página: "+(pageIndex+1),
                    (int)pageWidth/2-35, (int)(pageHeight
                    +fontHeight-fontDesent));*/
                    
                    g2.translate(0f,headerHeightOnPage);
                    g2.translate(0f,-pageIndex*pageHeightForTable);
                    
                    if (pageIndex + 1 == totalNumPages) {
                        int lastRowPrinted = 	numRowsOnAPage * pageIndex;
                        int numRowsLeft = tab_calendario.getRowCount() - lastRowPrinted;
                        g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int) Math.ceil(tableWidthOnPage),(int) Math.ceil(oneRowHeight * numRowsLeft));
                    } else {
                        g2.setClip(0,(int)(pageHeightForTable*pageIndex),(int) Math.ceil(tableWidthOnPage),	(int) Math.ceil(pageHeightForTable));
                    }
                    
                    g2.scale(scale,scale);
                    tab_calendario.paint(g2);
                    g2.scale(1/scale,1/scale);
                    g2.translate(0f,pageIndex*pageHeightForTable);
                    g2.translate(0f, -headerHeightOnPage);
                    g2.setClip(0, 0,(int) Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage));
                    g2.scale(scale,scale);
                    tab_calendario.getTableHeader().paint(g2);
                    
                    break;
                }
                case 3://detalle de ingresos
                {
                    
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setColor(Color.black);
                    int fontHeight=g2.getFontMetrics().getHeight();
                    int fontDesent=g2.getFontMetrics().getDescent();
                    double pageHeight =	pageFormat.getImageableHeight()-fontHeight;
                    double pageWidth = pageFormat.getImageableWidth();
                    double tableWidth = (double)tab_ingresos.getColumnModel().getTotalColumnWidth();
                    double scale = 1;
                    
                    if (tableWidth >= pageWidth) {
                        scale = pageWidth / tableWidth;
                    }
                    
                    double headerHeightOnPage=tab_ingresos.getTableHeader().getHeight()*scale;
                    double tableWidthOnPage=tableWidth*scale;
                    double oneRowHeight=(tab_ingresos.getRowHeight()+tab_ingresos.getRowMargin())*scale;
                    int numRowsOnAPage=(int)((pageHeight-headerHeightOnPage)/oneRowHeight);
                    double pageHeightForTable=oneRowHeight*	numRowsOnAPage;
                    int totalNumPages= (int)Math.ceil(((double)tab_ingresos.getRowCount())/numRowsOnAPage);
                    
                    if(pageIndex>=totalNumPages) {
                        return NO_SUCH_PAGE;
                    }
                    
                    g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
                    //loque esta borrado es para enumerar las paginas
                /*g2.drawString("Página: "+(pageIndex+1),
                (int)pageWidth/2-35, (int)(pageHeight
                +fontHeight-fontDesent));*/
                    
                    g2.translate(0f,headerHeightOnPage);
                    g2.translate(0f,-pageIndex*pageHeightForTable);
                    
                    if (pageIndex + 1 == totalNumPages) {
                        int lastRowPrinted = 	numRowsOnAPage * pageIndex;
                        int numRowsLeft = tab_ingresos.getRowCount() - lastRowPrinted;
                        g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int) Math.ceil(tableWidthOnPage),(int) Math.ceil(oneRowHeight * numRowsLeft));
                    } else {
                        g2.setClip(0,(int)(pageHeightForTable*pageIndex),(int) Math.ceil(tableWidthOnPage),	(int) Math.ceil(pageHeightForTable));
                    }
                    
                    g2.scale(scale,scale);
                    tab_ingresos.paint(g2);
                    g2.scale(1/scale,1/scale);
                    g2.translate(0f,pageIndex*pageHeightForTable);
                    g2.translate(0f, -headerHeightOnPage);
                    g2.setClip(0, 0,(int) Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage));
                    g2.scale(scale,scale);
                    tab_ingresos.getTableHeader().paint(g2);
                    
                    break;
                }
                case 4: // detalle de costos
                {
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setColor(Color.black);
                    int fontHeight=g2.getFontMetrics().getHeight();
                    int fontDesent=g2.getFontMetrics().getDescent();
                    double pageHeight =	pageFormat.getImageableHeight()-fontHeight;
                    double pageWidth = pageFormat.getImageableWidth();
                    double tableWidth = (double)tab_costos.getColumnModel().getTotalColumnWidth();
                    double scale = 1;
                    
                    if (tableWidth >= pageWidth) {
                        scale = pageWidth / tableWidth;
                    }
                    
                    double headerHeightOnPage=tab_costos.getTableHeader().getHeight()*scale;
                    double tableWidthOnPage=tableWidth*scale;
                    double oneRowHeight=(tab_costos.getRowHeight()+tab_costos.getRowMargin())*scale;
                    int numRowsOnAPage=(int)((pageHeight-headerHeightOnPage)/oneRowHeight);
                    double pageHeightForTable=oneRowHeight*	numRowsOnAPage;
                    int totalNumPages= (int)Math.ceil(((double)tab_costos.getRowCount())/numRowsOnAPage);
                    
                    if(pageIndex>=totalNumPages) {
                        return NO_SUCH_PAGE;
                    }
                    
                    g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
                    //loque esta borrado es para enumerar las paginas
                    /*g2.drawString("Página: "+(pageIndex+1),
                    (int)pageWidth/2-35, (int)(pageHeight
                    +fontHeight-fontDesent));*/
                    
                    g2.translate(0f,headerHeightOnPage);
                    g2.translate(0f,-pageIndex*pageHeightForTable);
                    
                    if (pageIndex + 1 == totalNumPages) {
                        int lastRowPrinted = 	numRowsOnAPage * pageIndex;
                        int numRowsLeft = tab_costos.getRowCount() - lastRowPrinted;
                        g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int) Math.ceil(tableWidthOnPage),(int) Math.ceil(oneRowHeight * numRowsLeft));
                    } else {
                        g2.setClip(0,(int)(pageHeightForTable*pageIndex),(int) Math.ceil(tableWidthOnPage),	(int) Math.ceil(pageHeightForTable));
                    }
                    
                    g2.scale(scale,scale);
                    tab_costos.paint(g2);
                    g2.scale(1/scale,1/scale);
                    g2.translate(0f,pageIndex*pageHeightForTable);
                    g2.translate(0f, -headerHeightOnPage);
                    g2.setClip(0, 0,(int) Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage));
                    g2.scale(scale,scale);
                    tab_costos.getTableHeader().paint(g2);
                    
                    break;
                }
                case 5:
                {
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setColor(Color.black);
                    int fontHeight=g2.getFontMetrics().getHeight();
                    int fontDesent=g2.getFontMetrics().getDescent();
                    double pageHeight =	pageFormat.getImageableHeight()-fontHeight;
                    double pageWidth = pageFormat.getImageableWidth();
                    double tableWidth = (double)tab_gastos.getColumnModel().getTotalColumnWidth();
                    double scale = 1;
                    
                    if (tableWidth >= pageWidth) {
                        scale = pageWidth / tableWidth;
                    }
                    
                    double headerHeightOnPage=tab_gastos.getTableHeader().getHeight()*scale;
                    double tableWidthOnPage=tableWidth*scale;
                    double oneRowHeight=(tab_gastos.getRowHeight()+tab_gastos.getRowMargin())*scale;
                    int numRowsOnAPage=(int)((pageHeight-headerHeightOnPage)/oneRowHeight);
                    double pageHeightForTable=oneRowHeight*	numRowsOnAPage;
                    int totalNumPages= (int)Math.ceil(((double)tab_gastos.getRowCount())/numRowsOnAPage);
                    
                    if(pageIndex>=totalNumPages) {
                        return NO_SUCH_PAGE;
                    }
                    
                    g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
                    //loque esta borrado es para enumerar las paginas
                    /*g2.drawString("Página: "+(pageIndex+1),
                    (int)pageWidth/2-35, (int)(pageHeight
                    +fontHeight-fontDesent));*/
                    
                    g2.translate(0f,headerHeightOnPage);
                    g2.translate(0f,-pageIndex*pageHeightForTable);
                    
                    if (pageIndex + 1 == totalNumPages) {
                        int lastRowPrinted = 	numRowsOnAPage * pageIndex;
                        int numRowsLeft = tab_gastos.getRowCount() - lastRowPrinted;
                        g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int) Math.ceil(tableWidthOnPage),(int) Math.ceil(oneRowHeight * numRowsLeft));
                    } else {
                        g2.setClip(0,(int)(pageHeightForTable*pageIndex),(int) Math.ceil(tableWidthOnPage),	(int) Math.ceil(pageHeightForTable));
                    }
                    
                    g2.scale(scale,scale);
                    tab_gastos.paint(g2);
                    g2.scale(1/scale,1/scale);
                    g2.translate(0f,pageIndex*pageHeightForTable);
                    g2.translate(0f, -headerHeightOnPage);
                    g2.setClip(0, 0,(int) Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage));
                    g2.scale(scale,scale);
                    tab_gastos.getTableHeader().paint(g2);
                    
                    break;
                }
                case 6:
                {
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setColor(Color.black);
                    int fontHeight=g2.getFontMetrics().getHeight();
                    int fontDesent=g2.getFontMetrics().getDescent();
                    double pageHeight =	pageFormat.getImageableHeight()-fontHeight;
                    double pageWidth = pageFormat.getImageableWidth();
                    double tableWidth = (double)tabla1.getColumnModel().getTotalColumnWidth();
                    double scale = 1;
                    
                    if (tableWidth >= pageWidth) {
                        scale = pageWidth / tableWidth;
                    }
                    
                    double headerHeightOnPage=tabla1.getTableHeader().getHeight()*scale;
                    double tableWidthOnPage=tableWidth*scale;
                    double oneRowHeight=(tabla1.getRowHeight()+tabla1.getRowMargin())*scale;
                    int numRowsOnAPage=(int)((pageHeight-headerHeightOnPage)/oneRowHeight);
                    double pageHeightForTable=oneRowHeight*	numRowsOnAPage;
                    int totalNumPages= (int)Math.ceil(((double)tabla1.getRowCount())/numRowsOnAPage);
                    
                    if(pageIndex>=totalNumPages) {
                        return NO_SUCH_PAGE;
                    }
                    
                    g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
                    //loque esta borrado es para enumerar las paginas
                    /*g2.drawString("Página: "+(pageIndex+1),
                    (int)pageWidth/2-35, (int)(pageHeight
                    +fontHeight-fontDesent));*/
                    
                    g2.translate(0f,headerHeightOnPage);
                    g2.translate(0f,-pageIndex*pageHeightForTable);
                    
                    if (pageIndex + 1 == totalNumPages) {
                        int lastRowPrinted = 	numRowsOnAPage * pageIndex;
                        int numRowsLeft = tabla1.getRowCount() - lastRowPrinted;
                        g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int) Math.ceil(tableWidthOnPage),(int) Math.ceil(oneRowHeight * numRowsLeft));
                    } else {
                        g2.setClip(0,(int)(pageHeightForTable*pageIndex),(int) Math.ceil(tableWidthOnPage),	(int) Math.ceil(pageHeightForTable));
                    }
                    
                    g2.scale(scale,scale);
                    tabla1.paint(g2);
                    g2.scale(1/scale,1/scale);
                    g2.translate(0f,pageIndex*pageHeightForTable);
                    g2.translate(0f, -headerHeightOnPage);
                    g2.setClip(0, 0,(int) Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage));
                    g2.scale(scale,scale);
                    tabla1.getTableHeader().paint(g2);
                    
                    break;
                }
                case 7:
                {
                    Graphics2D g2 = (Graphics2D) g;
                    g2.setColor(Color.black);
                    int fontHeight=g2.getFontMetrics().getHeight();
                    int fontDesent=g2.getFontMetrics().getDescent();
                    double pageHeight =	pageFormat.getImageableHeight()-fontHeight;
                    double pageWidth = pageFormat.getImageableWidth();
                    double tableWidth = (double)tabla2.getColumnModel().getTotalColumnWidth();
                    double scale = 1;
                    
                    if (tableWidth >= pageWidth) {
                        scale = pageWidth / tableWidth;
                    }
                    
                    double headerHeightOnPage=tabla2.getTableHeader().getHeight()*scale;
                    double tableWidthOnPage=tableWidth*scale;
                    double oneRowHeight=(tabla2.getRowHeight()+tabla2.getRowMargin())*scale;
                    int numRowsOnAPage=(int)((pageHeight-headerHeightOnPage)/oneRowHeight);
                    double pageHeightForTable=oneRowHeight*	numRowsOnAPage;
                    int totalNumPages= (int)Math.ceil(((double)tabla2.getRowCount())/numRowsOnAPage);
                    
                    if(pageIndex>=totalNumPages) {
                        return NO_SUCH_PAGE;
                    }
                    
                    g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
                    //loque esta borrado es para enumerar las paginas
                    /*g2.drawString("Página: "+(pageIndex+1),
                    (int)pageWidth/2-35, (int)(pageHeight
                    +fontHeight-fontDesent));*/
                    
                    g2.translate(0f,headerHeightOnPage);
                    g2.translate(0f,-pageIndex*pageHeightForTable);
                    
                    if (pageIndex + 1 == totalNumPages) {
                        int lastRowPrinted = 	numRowsOnAPage * pageIndex;
                        int numRowsLeft = tabla2.getRowCount() - lastRowPrinted;
                        g2.setClip(0, (int)(pageHeightForTable * pageIndex),(int) Math.ceil(tableWidthOnPage),(int) Math.ceil(oneRowHeight * numRowsLeft));
                    } else {
                        g2.setClip(0,(int)(pageHeightForTable*pageIndex),(int) Math.ceil(tableWidthOnPage),	(int) Math.ceil(pageHeightForTable));
                    }
                    
                    g2.scale(scale,scale);
                    tabla2.paint(g2);
                    g2.scale(1/scale,1/scale);
                    g2.translate(0f,pageIndex*pageHeightForTable);
                    g2.translate(0f, -headerHeightOnPage);
                    g2.setClip(0, 0,(int) Math.ceil(tableWidthOnPage),(int)Math.ceil(headerHeightOnPage));
                    g2.scale(scale,scale);
                    tabla2.getTableHeader().paint(g2);
                    break;
                }
            }
            return Printable.PAGE_EXISTS;
        }
    }
    public DefaultMutableTreeNode addObject(Object child){
        DefaultMutableTreeNode parentNode = null;
        TreePath parentPath = jTree2.getSelectionPath();
        
        if (parentPath == null) {
            parentNode = detalle;
        } else {
            parentNode = (DefaultMutableTreeNode)
            (parentPath.getLastPathComponent());
        }
        
        return addObject(parentNode, child, true);
    }
    public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,Object child) {
        return addObject(parent, child, false);
    }
    public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,Object child,boolean shouldBeVisible){
        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);
        
        if (parent == null) {
            parent = detalle;
        }
        
        treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
        
        
        // Make sure the user can see the lovely new node.
        if (shouldBeVisible) {
            jTree2.expandPath(new TreePath(parent.getPath()));
            jTree2.scrollPathToVisible(new TreePath(childNode.getPath()));
        }
        return childNode;
    }
    public void CalcularEstadoResultados() {
        //Estado de resultado Financiado
        for(int i = 1; i <= vutil; i++) {   //estado de resuiltado finaciado
            ub1[i] = (var_ingresos[i] - (Ik[i] + var_costos[i]+ vdepreciacion[i]));
            uop_1[i] = ub1[i] - var_gastos[i];
            impuesto1[i] = (ir/100)*uop_1[i];
            uop1[i] = (1- (ir/100))*uop_1[i];
            FNE1[i] = uop1[i] + vdepreciacion[i] - pp[i];
            
            //estado de resultado no financiado
            ub2[i] = (var_ingresos[i] - (var_costos[i]+ vdepreciacion[i]));
            uop_2[i] = ub2[i] - var_gastos[i];
            impuesto2[i] = (ir/100)*uop_2[i];
            uop2[i] = (1- (ir/100))*uop_2[i];
            FNE2[i] = uop2[i] + vdepreciacion[i];
        }
        System.out.println("Se clculo los estados de resultados con exito");
    }
    public void ContruirEstados() {//estado de resultado financiado
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("Ingresos");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("- Costos");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("- Interes");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("- Depreciación");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("= U. B. A. I.");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("- G. Op.");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("= U. O. A. I.");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("- I.R.");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("= U. O. D. I.");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("+ Depreciación");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("- Pago al principal");  modelotabla1.addRow(rambo);
        rambo = new Vector();   modelotabla1 = (DefaultTableModel)tabla1.getModel(); rambo.add("= F. N. E.");  modelotabla1.addRow(rambo);
        
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("Ingresos"); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("-Costos"); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("- Depreciación"); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("= U. B. A. I."); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("- G. Op."); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("= U. O. A. I. "); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("- I.R."); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("= U. O. D. I."); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("+ Depreciación"); modelotabla2.addRow(Marcos);
        Marcos = new Vector();   modelotabla2 = (DefaultTableModel)tabla2.getModel(); Marcos.add("= F. N. E."); modelotabla2.addRow(Marcos);
        
    }
    public void LimpiezaGeneral(){
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel A;
    private javax.swing.JMenu Archivo;
    private javax.swing.JCheckBox CF;
    private javax.swing.JCheckBox CV;
    private javax.swing.JCheckBox GF;
    private javax.swing.JCheckBox GV;
    private javax.swing.JCheckBox IF;
    private javax.swing.JCheckBox IV;
    private javax.swing.JMenu Imprimir;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JButton SubTotalCostos;
    private javax.swing.JButton SubTotalGastos;
    private javax.swing.JButton SubTotalIngresos;
    private javax.swing.JButton agregar;
    private javax.swing.JButton b_aceptar1;
    private javax.swing.JProgressBar barra;
    private javax.swing.JProgressBar barra2;
    private javax.swing.JMenuItem calculadora;
    private javax.swing.JPanel estado_sf;
    private javax.swing.JPanel estados;
    private javax.swing.JMenu excel;
    private javax.swing.JMenuItem excelcalendario1;
    private javax.swing.JMenuItem exceldepreciacion1;
    private javax.swing.JMenuItem exceldetallecostos1;
    private javax.swing.JMenuItem exceldetallegastos;
    private javax.swing.JMenuItem exceldetalleingresos1;
    private javax.swing.JMenuItem excelestadof1;
    private javax.swing.JMenuItem excelestadonf1;
    private javax.swing.JLabel fileo2;
    private javax.swing.JButton finale;
    private javax.swing.JLabel foleo;
    private javax.swing.JLabel fuego;
    private javax.swing.ButtonGroup grupo1;
    private javax.swing.ButtonGroup grupo2;
    private javax.swing.ButtonGroup grupo3;
    private javax.swing.JMenuItem imp_calendario;
    private javax.swing.JMenuItem imp_depreciacion;
    private javax.swing.JMenuItem imp_detallecostos;
    private javax.swing.JMenuItem imp_detallegast;
    private javax.swing.JMenuItem imp_detalleingresos;
    private javax.swing.JMenuItem imp_estadof;
    private javax.swing.JMenuItem imp_estadonf;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JSeparator jSeparator19;
    private javax.swing.JSeparator jSeparator20;
    private javax.swing.JSeparator jSeparator21;
    private javax.swing.JSeparator jSeparator22;
    private javax.swing.JSeparator jSeparator23;
    private javax.swing.JSeparator jSeparator24;
    private javax.swing.JSeparator jSeparator29;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator30;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTree jTree2;
    private javax.swing.JComboBox jc_depreciacion;
    private javax.swing.JComboBox jc_mcalculo;
    private javax.swing.JScrollPane js_calendario;
    private javax.swing.JScrollPane js_costos;
    private javax.swing.JScrollPane js_depreciacion;
    private javax.swing.JScrollPane js_er1;
    private javax.swing.JScrollPane js_er2;
    private javax.swing.JScrollPane js_gastos;
    private javax.swing.JScrollPane js_ingresos;
    public javax.swing.JTabbedPane jtabbedpane;
    private javax.swing.JLabel l_añoc;
    
    private javax.swing.JPanel requerimientos;
    private javax.swing.JTextField t_añoc;
    private javax.swing.JTextField t_empresa;
    private javax.swing.JTextField t_interes;
    private javax.swing.JTextField t_ir;
    private javax.swing.JTextField t_mfinanciamiento;
    private javax.swing.JTextField t_monto;
    private javax.swing.JTextField t_plazo;
    private javax.swing.JTextField t_tmar;
    private javax.swing.JTextField t_vsalvamento;
    private javax.swing.JTextField t_vutil;
    private javax.swing.JTable tab_calendario;
    private javax.swing.JTable tab_costos;
    private javax.swing.JTable tab_depreciacion;
    private javax.swing.JTable tab_gastos;
    private javax.swing.JTable tab_ingresos;
    private javax.swing.JTable tabla1;
    private javax.swing.JTable tabla2;
    private javax.swing.JPanel tablas;
    private javax.swing.JTextField txtcostos;
    private javax.swing.JTextField txtgastos;
    private javax.swing.JTextField txtingresos;
    // End of variables declaration//GEN-END:variables
    
}
